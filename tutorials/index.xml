<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials-rss on MySqlConnector: Async MySQL Driver for .NET and .NET Core</title>
    <link>https://mysql-net.github.io/MySqlConnector/tutorials/index.xml</link>
    <description>Recent content in Tutorials-rss on MySqlConnector: Async MySQL Driver for .NET and .NET Core</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 16 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mysql-net.github.io/MySqlConnector/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Best Practices</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/best-practices/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/best-practices/</guid>
      <description>

&lt;h1 id=&#34;best-practices&#34;&gt;Best Practices&lt;/h1&gt;

&lt;h2 id=&#34;asynchronous-operation&#34;&gt;Asynchronous Operation&lt;/h2&gt;

&lt;p&gt;MySqlConnector is fully asynchronous, supporting the async ADO.NET methods added in .NET 4.5 without blocking
or using &lt;code&gt;Task.Run&lt;/code&gt; to run synchronous methods on a background thread.  Programmers implementing MySqlConnector
should be familiar with &lt;a href=&#34;https://msdn.microsoft.com/en-us/magazine/jj991977.aspx&#34;&gt;Async/Await - Best Practices in Asynchronous Programming&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;always-use-async-when-possible&#34;&gt;Always Use Async when possible&lt;/h3&gt;

&lt;table class=&#34;table table-bordered table-head-centered&#34; style=&#34;max-width: 650px&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width:30%&#34;&gt;ADO.NET Class&lt;/th&gt;
    &lt;th class=&#34;success&#34; style=&#34;width:40%&#34;&gt;Asynchronous Method&lt;br /&gt;(always use when possible)&lt;/th&gt;
    &lt;th class=&#34;warning&#34; style=&#34;width:30%&#34;&gt;Synchronous Method&lt;br /&gt;(avoid when possible)&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbconnection&#34;&gt;DbConnection&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;OpenAsync&lt;/td&gt;
    &lt;td&gt;Open&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;&lt;a href=&#34;api/mysql-connection&#34;&gt;MySqlConnection&lt;/a&gt;.BeginTransactionAsync
    &lt;/td&gt;
    &lt;td&gt;BeginTransaction&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;3&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbcommand&#34;&gt;DbCommand&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;ExecuteNonQueryAsync&lt;/td&gt;
    &lt;td&gt;ExecuteNonQuery&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ExecuteReaderAsync&lt;/td&gt;
    &lt;td&gt;ExecuteReader&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ExecuteScalarAsync&lt;/td&gt;
    &lt;td&gt;ExecuteScalar&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbdatareader&#34;&gt;DbDataReader&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;NextResultAsync&lt;/td&gt;
    &lt;td&gt;NextResult&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ReadAsync&lt;/td&gt;
    &lt;td&gt;Read&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbtransaction&#34;&gt;DbTransaction&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;&lt;a href=&#34;api/mysql-transaction&#34;&gt;MySqlTransaction&lt;/a&gt;.CommitAsync
    &lt;/td&gt;
    &lt;td&gt;Commit&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;&lt;a href=&#34;api/mysql-transaction&#34;&gt;MySqlTransaction&lt;/a&gt;.RollbackAsync
    &lt;/td&gt;
    &lt;td&gt;Rollback&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;Async Transaction methods are not part of ADO.NET, they are provided by
MySqlConnector to allow database code to remain fully asynchronous.&lt;/p&gt;

&lt;h3 id=&#34;exceptions-dbdatareader-getfieldvalueasync-and-isdbnullasync&#34;&gt;Exceptions: DbDataReader.GetFieldValueAsync and IsDBNullAsync&lt;/h3&gt;

&lt;p&gt;Once &lt;code&gt;DbDataReader.ReadAsync&lt;/code&gt; (or &lt;code&gt;DbDataReader.Read&lt;/code&gt;) has returned &lt;code&gt;true&lt;/code&gt;, the full contents of the current
row will be in memory. Calling &lt;code&gt;GetFieldValue&amp;lt;T&amp;gt;&lt;/code&gt; will return the value immediately (without blocking on I/O).
It will have higher performance than &lt;code&gt;GetFieldValueAsync&amp;lt;T&amp;gt;&lt;/code&gt; because it doesn&amp;rsquo;t have to allocate a &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;
to store the result. There is no performance benefit to using the &lt;code&gt;DbDataReader.GetFieldValueAsync&amp;lt;T&amp;gt;&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Similarly, prefer to call &lt;code&gt;IsDBNull&lt;/code&gt; instead of &lt;code&gt;IsDBNullAsync&lt;/code&gt;; the information is already available and
&lt;code&gt;IsDBNull&lt;/code&gt; can return it immediately. (The async performance penalty isn&amp;rsquo;t quite as bad because &lt;code&gt;IsDBNullAsync&lt;/code&gt;
uses cached &lt;code&gt;Task&amp;lt;bool&amp;gt;&lt;/code&gt; objects for its &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; return values.)&lt;/p&gt;

&lt;h3 id=&#34;example-console-application&#34;&gt;Example Console Application&lt;/h3&gt;

&lt;p&gt;In order to get the full benefit of asynchronous operation, every method in the call stack that eventually calls
MySqlConnector should be implemented as an async method.  The exception is the &lt;code&gt;static void Main&lt;/code&gt; method in a Console Application.&lt;/p&gt;

&lt;p&gt;Example assumes a &lt;a href=&#34;overview/configuration&#34;&gt;configured AppDb&lt;/a&gt; object in the &lt;code&gt;MySqlConnector.Examples&lt;/code&gt; namespace.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Threading.Tasks;
using System.Collections.Generic;

namespace MySqlConnector.Examples
{
    public class Program
    {
        public static void Main(string[] args)
        {
            MainAsync(args).GetAwaiter().GetResult();
        }

        public static async Task MainAsync(string[] args)
        {
            var tasks = new List&amp;lt;Task&amp;gt;();
            for (var i=0; i&amp;lt;100; i++){
                tasks.Add(Controllers.SleepOne());
            }
            // these 100 queries should all complete in around
            // 1 second if &amp;quot;Max Pool Size=100&amp;quot; (the default)
            await Task.WhenAll(tasks);
        }
    }

    public class Controllers
    {
        public static async Task SleepOne()
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                using (var cmd = db.Connection.CreateCommand())
                {
                    cmd.CommandText = @&amp;quot;SELECT SLEEP(1)&amp;quot;;
                    await cmd.ExecuteNonQueryAsync();
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;synchronous-operation&#34;&gt;Synchronous Operation&lt;/h2&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  Using Synchronous Methods can have adverse effects on the managed thread pool and cause slowdowns or lock-ups
  if not properly tuned.  The recommended approach is to use all Asynchronous Methods.
&lt;/div&gt;

&lt;p&gt;If you must use synchronous methods, ensure that your thread pool is at least the size of the number of
concurrent connections you plan to support.  For example, if you are creating a web server using
synchronous methods that needs to support serving 500 Requests Per Second, set the minimum thread
pool size to 500.&lt;/p&gt;

&lt;p&gt;Example &lt;code&gt;project.json&lt;/code&gt; configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;runtimeOptions&amp;quot;: {
    &amp;quot;configProperties&amp;quot;: {
      &amp;quot;System.GC.Server&amp;quot;: true,
      &amp;quot;System.GC.Concurrent&amp;quot;: true,
      &amp;quot;System.Threading.ThreadPool.MinThreads&amp;quot;: 500
    }
  },
  // other config
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrating from Connector/NET</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/migrating-from-connector-net/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/migrating-from-connector-net/</guid>
      <description>

&lt;h1 id=&#34;migrating-from-connector-net&#34;&gt;Migrating from Connector/NET&lt;/h1&gt;

&lt;h3 id=&#34;connection-string-differences&#34;&gt;Connection String Differences&lt;/h3&gt;

&lt;p&gt;MySqlConnector has some different default connection string options:&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width:20%&#34;&gt;Option&lt;/th&gt;
    &lt;th style=&#34;width:20%&#34;&gt;MySqlConnector&lt;/th&gt;
    &lt;th style=&#34;width:20%&#34;&gt;Oracle&#39;s Connector/NET&lt;/th&gt;
    &lt;th style=&#34;width:40%&#34;&gt;Notes&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;AllowPublicKeyRetrieval&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;(not configurable)&lt;/td&gt;
    &lt;td&gt;When using &lt;code&gt;sha256_password&lt;/code&gt; authentication, this option allows the RSA public key to be retrieved from the server
    (when not using a secure connection). It&#39;s &lt;code&gt;false&lt;/code&gt; by default to avoid disclosing the password to a malicious proxy.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;ConnectionReset&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;MySqlConnector takes an extra command to reset pooled connections by default so that the connection is always in a known state&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;ServerRSAPublicKeyFile&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;(no default)&lt;/td&gt;
    &lt;td&gt;(not configurable)&lt;/td&gt;
    &lt;td&gt;Specify the server&#39;s RSA public key to allow &lt;code&gt;sha256_password&lt;/code&gt; authentication over an insecure connection.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;UseAffectedRows&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;This also affects the behavior of the &lt;code&gt;ROW_COUNT&lt;/code&gt; function.  &lt;code&gt;UseAffectedRows=true&lt;/code&gt; is the default in most other languages (C++, PHP, others)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Some command line options that are supported in Connector/NET are not supported in MySqlConnector.  For a full list of options that are
supported in MySqlConnector, see the &lt;a href=&#34;connection-options&#34;&gt;Connection Options&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;transactionscope&#34;&gt;TransactionScope&lt;/h3&gt;

&lt;p&gt;MySqlConnector adds full distributed transaction support (for client code using &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.transactions.transactionscope.aspx&#34;&gt;&lt;code&gt;TransactionScope&lt;/code&gt;&lt;/a&gt;),
while Connector/NET uses regular database transactions. As a result, code that uses &lt;code&gt;TransactionScope&lt;/code&gt;
may execute differently with MySqlConnector. To get Connector/NET-compatible behavior, remove
&lt;code&gt;TransactionScope&lt;/code&gt; and use &lt;code&gt;BeginTransaction&lt;/code&gt;/&lt;code&gt;Commit&lt;/code&gt; directly.&lt;/p&gt;

&lt;h3 id=&#34;mysqlconnection&#34;&gt;MySqlConnection&lt;/h3&gt;

&lt;p&gt;Connector/NET allows a &lt;code&gt;MySqlConnection&lt;/code&gt; object to be reused after it has been disposed. MySqlConnector requires a new &lt;code&gt;MySqlConnection&lt;/code&gt;
object to be created. See &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/331&#34;&gt;#331&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3 id=&#34;mysqlcommand&#34;&gt;MySqlCommand&lt;/h3&gt;

&lt;p&gt;Connector/NET allows a command to be executed even when &lt;code&gt;MySqlCommand.Transaction&lt;/code&gt; references a commited, rolled back, or
disposed &lt;code&gt;MySqlTransaction&lt;/code&gt;. MySqlConnector will throw an &lt;code&gt;InvalidOperationException&lt;/code&gt; if the &lt;code&gt;MySqlCommand.Transaction&lt;/code&gt;
property doesn&amp;rsquo;t reference the active transaction. See &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/333&#34;&gt;#333&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3 id=&#34;bugs-present-in-connector-net-that-are-fixed-in-mysqlconnector&#34;&gt;Bugs present in Connector/NET that are fixed in MySqlConnector&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=37283&#34;&gt;#37283&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=70587&#34;&gt;#70587&lt;/a&gt;: Distributed transactions are not supported&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=50773&#34;&gt;#50773&lt;/a&gt;: Can&amp;rsquo;t use multiple connections within one TransactionScope&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=61477&#34;&gt;#61477&lt;/a&gt;: &lt;code&gt;ColumnOrdinal&lt;/code&gt; in schema table is 1-based&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=66476&#34;&gt;#66476&lt;/a&gt;: Connection pool uses queue instead of stack&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=70111&#34;&gt;#70111&lt;/a&gt;: &lt;code&gt;Async&lt;/code&gt; methods execute synchronously&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=70686&#34;&gt;#70686&lt;/a&gt;: &lt;code&gt;TIME(3)&lt;/code&gt; and &lt;code&gt;TIME(6)&lt;/code&gt; fields serialize milliseconds incorrectly&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=72494&#34;&gt;#72494&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=83330&#34;&gt;#83330&lt;/a&gt;: EndOfStreamException inserting large blob with UseCompression=True&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=73610&#34;&gt;#73610&lt;/a&gt;: Invalid password exception has wrong number&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=73788&#34;&gt;#73788&lt;/a&gt;: Can&amp;rsquo;t use &lt;code&gt;DateTimeOffset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=75917&#34;&gt;#75917&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=76597&#34;&gt;#76597&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=77691&#34;&gt;#77691&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78650&#34;&gt;#78650&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78919&#34;&gt;#78919&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=80921&#34;&gt;#80921&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=82136&#34;&gt;#82136&lt;/a&gt;: &amp;ldquo;Reading from the stream has failed&amp;rdquo; when connecting to a server&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=77421&#34;&gt;#77421&lt;/a&gt;: Connection is not reset when pulled from the connection pool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78426&#34;&gt;#78426&lt;/a&gt;: Unknown database exception has wrong number&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78760&#34;&gt;#78760&lt;/a&gt;: Error when using tabs and newlines in SQL statements&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78917&#34;&gt;#78917&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=79196&#34;&gt;#79196&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=82292&#34;&gt;#82292&lt;/a&gt;: &lt;code&gt;TINYINT(1)&lt;/code&gt; values start being returned as &lt;code&gt;sbyte&lt;/code&gt; after &lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=80030&#34;&gt;#80030&lt;/a&gt;: Slow to connect with pooling disabled&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=81650&#34;&gt;#81650&lt;/a&gt;: &lt;code&gt;Server&lt;/code&gt; connection string option may now contain multiple, comma separated hosts that will be tried in order until a connection succeeds&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=83329&#34;&gt;#83229&lt;/a&gt;: &amp;ldquo;Unknown command&amp;rdquo; exception inserting large blob with UseCompression=True&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=84220&#34;&gt;#84220&lt;/a&gt;: Cannot call a stored procedure with &lt;code&gt;.&lt;/code&gt; in its name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=84701&#34;&gt;#84701&lt;/a&gt;: Can&amp;rsquo;t create a paramter using a 64-bit enum with a value greater than int.MaxValue&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=85185&#34;&gt;#85185&lt;/a&gt;: &lt;code&gt;ConnectionReset=True&lt;/code&gt; does not preserve connection charset&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=86263&#34;&gt;#86263&lt;/a&gt;: Transaction isolation level affects all transactions in session&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=87868&#34;&gt;#87868&lt;/a&gt;: &lt;code&gt;ColumnSize&lt;/code&gt; in schema table is incorrect for &lt;code&gt;CHAR(36)&lt;/code&gt; and &lt;code&gt;BLOB&lt;/code&gt; columns&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=87876&#34;&gt;#87876&lt;/a&gt;: &lt;code&gt;IsLong&lt;/code&gt; is schema table is incorrect for &lt;code&gt;LONGTEXT&lt;/code&gt; and &lt;code&gt;LONGBLOB&lt;/code&gt; columns&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Use with .NET Core MVC</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/net-core-mvc/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/net-core-mvc/</guid>
      <description>

&lt;h1 id=&#34;use-with-net-core-mvc&#34;&gt;Use with .NET Core MVC&lt;/h1&gt;

&lt;p&gt;This tutorial will walk through a basic .NET Core JSON API application that performs CRUD operations on
blog posts.  The code in this tutorial comes is an adaptation of &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/tree/master/tests/MySqlConnector.Performance&#34;&gt;MySqlConnector.Performance&lt;/a&gt;,
the performance application that is used to stress test MySqlConnector.&lt;/p&gt;

&lt;h3 id=&#34;initialize-mysql&#34;&gt;Initialize MySQL&lt;/h3&gt;

&lt;p&gt;Create a MySQL database and copy the following SQL to create a table called &lt;code&gt;BlogPost&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;CREATE TABLE IF NOT EXISTS `BlogPost` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Content` longtext,
  `Title` longtext,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;initialize-net-core-mvc&#34;&gt;Initialize .NET Core MVC&lt;/h3&gt;

&lt;p&gt;Create a new directory for the project with a &lt;code&gt;project.json&lt;/code&gt; file at the root:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;Microsoft.AspNetCore.Mvc&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Server.Kestrel&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.EnvironmentVariables&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.FileExtensions&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.Json&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.CommandLine&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging.Console&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging.Debug&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Options.ConfigurationExtensions&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;MySqlConnector&amp;quot;: &amp;quot;0.*&amp;quot;
  },

  &amp;quot;frameworks&amp;quot;: {
    &amp;quot;netcoreapp1.0&amp;quot;: {
      &amp;quot;dependencies&amp;quot;: {
        &amp;quot;Microsoft.NETCore.App&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;platform&amp;quot;,
          &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;
        }
      }
    }
  },

  &amp;quot;runtimeOptions&amp;quot;: {
    &amp;quot;gcServer&amp;quot;: true
  },

  &amp;quot;buildOptions&amp;quot;: {
    &amp;quot;emitEntryPoint&amp;quot;: true,
    &amp;quot;preserveCompilationContext&amp;quot;: true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the command &lt;code&gt;dotnet restore&lt;/code&gt; in this directory.&lt;/p&gt;

&lt;h3 id=&#34;add-configuration-files&#34;&gt;Add Configuration Files&lt;/h3&gt;

&lt;p&gt;The first building block of our appplication is definig a couple JSON files to hold configuration:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;appsettings.json&lt;/code&gt; holds .NET Core logging levels:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;Logging&amp;quot;: {
        &amp;quot;IncludeScopes&amp;quot;: false,
        &amp;quot;LogLevel&amp;quot;: {
            &amp;quot;Default&amp;quot;: &amp;quot;Error&amp;quot;,
            &amp;quot;System&amp;quot;: &amp;quot;Error&amp;quot;,
            &amp;quot;Microsoft&amp;quot;: &amp;quot;Error&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config.json&lt;/code&gt; holds the ADO.NET Connection String:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;Data&amp;quot;: {
        &amp;quot;ConnectionString&amp;quot;: &amp;quot;server=127.0.0.1;user id=mysqltest;password=test;port=3306;database=blog;&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AppConfig.cs&lt;/code&gt; is a static class that builds a Configuration object from these files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.IO;
using Microsoft.Extensions.Configuration;

namespace MySqlConnector.Performance
{
    public static class AppConfig
    {
        public static IConfigurationRoot Config = new ConfigurationBuilder()
        .SetBasePath(Directory.GetCurrentDirectory())
        .AddJsonFile(&amp;quot;appsettings.json&amp;quot;)
        .AddJsonFile(&amp;quot;config.json&amp;quot;)
        .Build();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AppDb.cs&lt;/code&gt; is a disposable &lt;a href=&#34;overview/configuration/&#34;&gt;Application Database Object&lt;/a&gt;, adapted to read the ConnectionString
from the Configuration Object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using MySql.Data.MySqlClient;

namespace MySqlConnector.Performance
{
    public class AppDb : IDisposable
    {

        public MySqlConnection Connection;

        public AppDb()
        {
            Connection = new MySqlConnection(AppConfig.Config[&amp;quot;Data:ConnectionString&amp;quot;]);
        }

        public void Dispose()
        {
            Connection.Close();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;net-core-program-cs-and-startup-cs-files&#34;&gt;.NET Core Program.cs and Startup.cs Files&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Program.cs&lt;/code&gt; contains the application entry point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNetCore.Hosting;

namespace MySqlConnector.Performance
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var host = new WebHostBuilder()
                .UseKestrel()
                .UseStartup&amp;lt;Startup&amp;gt;()
                .Build();
            host.Run();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Startup.cs&lt;/code&gt; contains runtime configuration and framework services:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Buffers;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc.Formatters;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace MySqlConnector.Performance
{
    public class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            Configuration = AppConfig.Config;
        }

        public IConfigurationRoot Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            services.AddMvc(options =&amp;gt;
            {
                options.OutputFormatters.Clear();
                options.OutputFormatters.Add(new JsonOutputFormatter(new JsonSerializerSettings()
                {
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                }, ArrayPool&amp;lt;char&amp;gt;.Shared));
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole(Configuration.GetSection(&amp;quot;Logging&amp;quot;));
            loggerFactory.AddDebug();

            app.UseMvc();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our app is configured and we can focus on writing the core functionality!&lt;/p&gt;

&lt;h3 id=&#34;models&#34;&gt;Models&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;BlogPost.cs&lt;/code&gt; represents a single Blog Post, and contains Insert, Update, and Delete methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Data;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;
using Newtonsoft.Json;

namespace MySqlConnector.Performance.Models
{
    public class BlogPost
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Content { get; set; }

        [JsonIgnore]
        public AppDb Db { get; set; }

        public BlogPost(AppDb db=null)
        {
            Db = db;
        }

        public async Task InsertAsync()
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;INSERT INTO `BlogPost` (`Title`, `Content`) VALUES (@title, @content);&amp;quot;;
            BindParams(cmd);
            await cmd.ExecuteNonQueryAsync();
            Id = (int) cmd.LastInsertedId;
        }

        public async Task UpdateAsync()
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;UPDATE `BlogPost` SET `Title` = @title, `Content` = @content WHERE `Id` = @id;&amp;quot;;
            BindParams(cmd);
            BindId(cmd);
            await cmd.ExecuteNonQueryAsync();
        }

        public async Task DeleteAsync()
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;DELETE FROM `BlogPost` WHERE `Id` = @id;&amp;quot;;
            BindId(cmd);
            await cmd.ExecuteNonQueryAsync();
        }

        private void BindId(MySqlCommand cmd)
        {
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@id&amp;quot;,
                DbType = DbType.Int32,
                Value = Id,
            });
        }

        private void BindParams(MySqlCommand cmd)
        {
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@title&amp;quot;,
                DbType = DbType.String,
                Value = Title,
            });
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@content&amp;quot;,
                DbType = DbType.String,
                Value = Content,
            });
        }

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;BlogPostQuery.cs&lt;/code&gt; contains commands to query Blog Posts from the database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;

namespace MySqlConnector.Performance.Models
{
    public class BlogPostQuery
    {

        public readonly AppDb Db;
        public BlogPostQuery(AppDb db)
        {
            Db = db;
        }

        public async Task&amp;lt;BlogPost&amp;gt; FindOneAsync(int id)
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;SELECT `Id`, `Title`, `Content` FROM `BlogPost` WHERE `Id` = @id&amp;quot;;
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@id&amp;quot;,
                DbType = DbType.Int32,
                Value = id,
            });
            var result = await ReadAllAsync(await cmd.ExecuteReaderAsync());
            return result.Count &amp;gt; 0 ? result[0] : null;
        }

        public async Task&amp;lt;List&amp;lt;BlogPost&amp;gt;&amp;gt; LatestPostsAsync()
        {
            var cmd = Db.Connection.CreateCommand();
            cmd.CommandText = @&amp;quot;SELECT `Id`, `Title`, `Content` FROM `BlogPost` ORDER BY `Id` DESC LIMIT 10;&amp;quot;;
            return await ReadAllAsync(await cmd.ExecuteReaderAsync());
        }

        public async Task DeleteAllAsync()
        {
            var txn = await Db.Connection.BeginTransactionAsync();
            try
            {
                var cmd = Db.Connection.CreateCommand();
                cmd.CommandText = @&amp;quot;DELETE FROM `BlogPost`&amp;quot;;
                await cmd.ExecuteNonQueryAsync();
                await txn.CommitAsync();
            }
            catch
            {
                await txn.RollbackAsync();
                throw;
            }
        }

        private async Task&amp;lt;List&amp;lt;BlogPost&amp;gt;&amp;gt; ReadAllAsync(DbDataReader reader)
        {
            var posts = new List&amp;lt;BlogPost&amp;gt;();
            using (reader)
            {
                while (await reader.ReadAsync())
                {
                    var post = new BlogPost(Db)
                    {
                        Id = await reader.GetFieldValueAsync&amp;lt;int&amp;gt;(0),
                        Title = await reader.GetFieldValueAsync&amp;lt;string&amp;gt;(1),
                        Content = await reader.GetFieldValueAsync&amp;lt;string&amp;gt;(2)
                    };
                    posts.Add(post);
                }
            }
            return posts;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;AsyncController.cs&lt;/code&gt; expose Async API Endpoints for CRUD operations on Blog Posts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using MySqlConnector.Performance.Models;

namespace MySqlConnector.Performance.Controllers
{
    [Route(&amp;quot;api/[controller]&amp;quot;)]
    public class AsyncController : Controller
    {
        // GET api/async
        [HttpGet]
        public async Task&amp;lt;IActionResult&amp;gt; GetLatest()
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.LatestPostsAsync();
                return new OkObjectResult(result);
            }
        }

        // GET api/async/5
        [HttpGet(&amp;quot;{id}&amp;quot;)]
        public async Task&amp;lt;IActionResult&amp;gt; GetOne(int id)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.FindOneAsync(id);
                if (result == null)
                return new NotFoundResult();
                return new OkObjectResult(result);
            }
        }

        // POST api/async
        [HttpPost]
        public async Task&amp;lt;IActionResult&amp;gt; Post([FromBody]BlogPost body)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                body.Db = db;
                await body.InsertAsync();
                return new OkObjectResult(body);
            }
        }

        // PUT api/async/5
        [HttpPut(&amp;quot;{id}&amp;quot;)]
        public async Task&amp;lt;IActionResult&amp;gt; PutOne(int id, [FromBody]BlogPost body)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.FindOneAsync(id);
                if (result == null)
                    return new NotFoundResult();
                result.Title = body.Title;
                result.Content = body.Content;
                await result.UpdateAsync();
                return new OkObjectResult(result);
            }
        }

        // DELETE api/async/5
        [HttpDelete(&amp;quot;{id}&amp;quot;)]
        public async Task&amp;lt;IActionResult&amp;gt; DeleteOne(int id)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.FindOneAsync(id);
                if (result == null)
                    return new NotFoundResult();
                await result.DeleteAsync();
                return new OkResult();
            }
        }

        // DELETE api/async
        [HttpDelete]
        public async Task&amp;lt;IActionResult&amp;gt; DeleteAll()
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                await query.DeleteAllAsync();
                return new OkResult();
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-the-app&#34;&gt;Run the App&lt;/h3&gt;

&lt;p&gt;Congratulations, you should have a fully functional app at this point!  You should be able to run &lt;code&gt;dotnet run&lt;/code&gt; to start your application.&lt;/p&gt;

&lt;p&gt;The following API Endpoints should work.  Note to set &lt;code&gt;Content-Type: application/json&lt;/code&gt; headers on &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;POST http://localhost:5000/api/async
{ &amp;quot;Title&amp;quot;: &amp;quot;One&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;First Blog Post!&amp;quot; }

POST http://localhost:5000/api/async
{ &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post!&amp;quot; }

POST http://localhost:5000/api/async
{ &amp;quot;Title&amp;quot;: &amp;quot;Three&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Third Blog Post!&amp;quot; }

GET http://localhost:5000/api/async
// Output:
[
    { &amp;quot;Id&amp;quot;: 3, &amp;quot;Title&amp;quot;: &amp;quot;Three&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Third Blog Post!&amp;quot; },
    { &amp;quot;Id&amp;quot;: 2, &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post!&amp;quot; },
    { &amp;quot;Id&amp;quot;: 1, &amp;quot;Title&amp;quot;: &amp;quot;One&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;First Blog Post!&amp;quot;}
]

DELETE http://localhost:5000/api/async/1
// blog post 1 is gone

PUT http://localhost:5000/api/async/2
{ &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post Revised&amp;quot; }

GET http://localhost:5000/api/async
// Output:
[
    { &amp;quot;Id&amp;quot;: 3, &amp;quot;Title&amp;quot;: &amp;quot;Three&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Third Blog Post!&amp;quot; },
    { &amp;quot;Id&amp;quot;: 2, &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post Revised&amp;quot; },
]

DELETE http://localhost:5000/api/async
// all blog posts are gone

GET http://localhost:5000/api/async
// Output:
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you would like to see all of this code and more on GitHub, check out &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/tree/master/tests/MySqlConnector.Performance&#34;&gt;MySqlConnector.Performance&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>