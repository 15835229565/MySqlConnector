<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySqlConnector: Async MySQL Driver for .NET and .NET Core</title>
    <link>https://mysql-net.github.io/MySqlConnector/index.xml</link>
    <description>Recent content on MySqlConnector: Async MySQL Driver for .NET and .NET Core</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 16 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mysql-net.github.io/MySqlConnector/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Best Practices</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/best-practices/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/best-practices/</guid>
      <description>

&lt;h1 id=&#34;best-practices&#34;&gt;Best Practices&lt;/h1&gt;

&lt;h2 id=&#34;asynchronous-operation&#34;&gt;Asynchronous Operation&lt;/h2&gt;

&lt;p&gt;MySqlConnector is fully asynchronous, supporting the async ADO.NET methods added in .NET 4.5 without blocking
or using &lt;code&gt;Task.Run&lt;/code&gt; to run synchronous methods on a background thread. Programmers implementing MySqlConnector
should be familiar with &lt;a href=&#34;https://msdn.microsoft.com/en-us/magazine/jj991977.aspx&#34;&gt;Async/Await - Best Practices in Asynchronous Programming&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;always-use-async-when-possible&#34;&gt;Always Use Async when possible&lt;/h3&gt;

&lt;table class=&#34;table table-bordered table-head-centered&#34; style=&#34;max-width: 650px&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width:30%&#34;&gt;ADO.NET Class&lt;/th&gt;
    &lt;th class=&#34;success&#34; style=&#34;width:40%&#34;&gt;Asynchronous Method&lt;br /&gt;(always use when possible)&lt;/th&gt;
    &lt;th class=&#34;warning&#34; style=&#34;width:30%&#34;&gt;Synchronous Method&lt;br /&gt;(avoid when possible)&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbconnection&#34;&gt;DbConnection&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;OpenAsync&lt;/td&gt;
    &lt;td&gt;Open&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;&lt;a href=&#34;api/mysql-connection&#34;&gt;MySqlConnection&lt;/a&gt;.BeginTransactionAsync
    &lt;/td&gt;
    &lt;td&gt;BeginTransaction&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;3&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbcommand&#34;&gt;DbCommand&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;ExecuteNonQueryAsync&lt;/td&gt;
    &lt;td&gt;ExecuteNonQuery&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ExecuteReaderAsync&lt;/td&gt;
    &lt;td&gt;ExecuteReader&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ExecuteScalarAsync&lt;/td&gt;
    &lt;td&gt;ExecuteScalar&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbdatareader&#34;&gt;DbDataReader&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;NextResultAsync&lt;/td&gt;
    &lt;td&gt;NextResult&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ReadAsync&lt;/td&gt;
    &lt;td&gt;Read&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbtransaction&#34;&gt;DbTransaction&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;&lt;a href=&#34;api/mysql-transaction&#34;&gt;MySqlTransaction&lt;/a&gt;.CommitAsync
    &lt;/td&gt;
    &lt;td&gt;Commit&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;&lt;a href=&#34;api/mysql-transaction&#34;&gt;MySqlTransaction&lt;/a&gt;.RollbackAsync
    &lt;/td&gt;
    &lt;td&gt;Rollback&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;Async Transaction methods are not part of ADO.NET, they are provided by
MySqlConnector to allow database code to remain fully asynchronous.&lt;/p&gt;

&lt;h3 id=&#34;exceptions-dbdatareader-getfieldvalueasync-and-isdbnullasync&#34;&gt;Exceptions: DbDataReader.GetFieldValueAsync and IsDBNullAsync&lt;/h3&gt;

&lt;p&gt;Once &lt;code&gt;DbDataReader.ReadAsync&lt;/code&gt; (or &lt;code&gt;DbDataReader.Read&lt;/code&gt;) has returned &lt;code&gt;true&lt;/code&gt;, the full contents of the current
row will be in memory. Calling &lt;code&gt;GetFieldValue&amp;lt;T&amp;gt;&lt;/code&gt; will return the value immediately (without blocking on I/O).
It will have higher performance than &lt;code&gt;GetFieldValueAsync&amp;lt;T&amp;gt;&lt;/code&gt; because it doesn&amp;rsquo;t have to allocate a &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;
to store the result. There is no performance benefit to using the &lt;code&gt;DbDataReader.GetFieldValueAsync&amp;lt;T&amp;gt;&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Similarly, prefer to call &lt;code&gt;IsDBNull&lt;/code&gt; instead of &lt;code&gt;IsDBNullAsync&lt;/code&gt;; the information is already available and
&lt;code&gt;IsDBNull&lt;/code&gt; can return it immediately. (The async performance penalty isn&amp;rsquo;t quite as bad because &lt;code&gt;IsDBNullAsync&lt;/code&gt;
uses cached &lt;code&gt;Task&amp;lt;bool&amp;gt;&lt;/code&gt; objects for its &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; return values.)&lt;/p&gt;

&lt;h3 id=&#34;example-console-application&#34;&gt;Example Console Application&lt;/h3&gt;

&lt;p&gt;In order to get the full benefit of asynchronous operation, every method in the call stack that eventually calls
MySqlConnector should be implemented as an async method.&lt;/p&gt;

&lt;p&gt;Example assumes a &lt;a href=&#34;overview/configuration&#34;&gt;configured AppDb&lt;/a&gt; object in the &lt;code&gt;MySqlConnector.Examples&lt;/code&gt; namespace.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Threading.Tasks;
using System.Collections.Generic;

namespace MySqlConnector.Examples
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            var tasks = new List&amp;lt;Task&amp;gt;();
            for (var i=0; i&amp;lt;100; i++)
            {
                tasks.Add(Controllers.SleepOne());
            }
            // these 100 queries should all complete in around
            // 1 second if &amp;quot;Max Pool Size=100&amp;quot; (the default)
            await Task.WhenAll(tasks);
        }
    }

    public class Controllers
    {
        public static async Task SleepOne()
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                using (var cmd = db.Connection.CreateCommand())
                {
                    cmd.CommandText = @&amp;quot;SELECT SLEEP(1)&amp;quot;;
                    await cmd.ExecuteNonQueryAsync();
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;synchronous-operation&#34;&gt;Synchronous Operation&lt;/h2&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  Using Synchronous Methods can have adverse effects on the managed thread pool and cause slowdowns or lock-ups
  if not properly tuned. The recommended approach is to use all Asynchronous Methods.
&lt;/div&gt;

&lt;p&gt;If you must use synchronous methods, ensure that your thread pool is at least the size of the number of
concurrent connections you plan to support. For example, if you are creating a web server using
synchronous methods that needs to support serving 500 Requests Per Second, set the minimum thread
pool size to 500.&lt;/p&gt;

&lt;p&gt;Example &lt;code&gt;csproj&lt;/code&gt; configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PropertyGroup&amp;gt;
  &amp;lt;ServerGarbageCollection&amp;gt;true&amp;lt;/ServerGarbageCollection&amp;gt;
  &amp;lt;ConcurrentGarbageCollection&amp;gt;true&amp;lt;/ConcurrentGarbageCollection&amp;gt;
  &amp;lt;ThreadPoolMinThreads&amp;gt;500&amp;lt;/ThreadPoolMinThreads&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Home</title>
      <link>https://mysql-net.github.io/MySqlConnector/home/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/home/</guid>
      <description>

&lt;h1 id=&#34;home&#34;&gt;Home&lt;/h1&gt;

&lt;p&gt;MySqlConnector is an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/e80y5yhx.aspx&#34;&gt;ADO.NET&lt;/a&gt; data
provider for &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;. It provides implementations of
&lt;code&gt;DbConnection&lt;/code&gt;, &lt;code&gt;DbCommand&lt;/code&gt;, &lt;code&gt;DbDataReader&lt;/code&gt;, &lt;code&gt;DbTransaction&lt;/code&gt; &amp;ndash; the classes
needed to query and update databases from managed code. Its features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET Core Compatibility&lt;/li&gt;
&lt;li&gt;Truly Asynchronous: async functions implement asynchronous I/O&lt;/li&gt;
&lt;li&gt;High Performance: code is stress tested for performance bottlenecks&lt;/li&gt;
&lt;li&gt;Lightweight: Library only implements ADO.NET core&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;why-use-mysql-over-oracle-s-connector-net&#34;&gt;Why use MySql over Oracle&amp;rsquo;s Connector/NET?&lt;/h3&gt;

&lt;p&gt;MySqlConnector is a clean-room reimplementation of the &lt;a href=&#34;https://dev.mysql.com/doc/internals/en/client-server-protocol.html&#34;&gt;MySQL Protocol&lt;/a&gt;
and is not based on &lt;a href=&#34;https://github.com/mysql/mysql-connector-net&#34;&gt;Oracle&amp;rsquo;s Connector/NET&lt;/a&gt;.&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;max-width: 650px&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width:25%&#34;&gt;&lt;/th&gt;
    &lt;th style=&#34;width:25%&#34;&gt;MySqlConnector&lt;/th&gt;
    &lt;th style=&#34;width:25%&#34;&gt;Oracle&#39;s Connector/NET&lt;/th&gt;
    &lt;th style=&#34;width:25%&#34;&gt;MySqlConnector Advantage&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;strong&gt;Async&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;Fully asynchronous&lt;/strong&gt; I/O&lt;/td&gt;
    &lt;td&gt;Async calls map to synchronous I/O&lt;/td&gt;
    &lt;td&gt;Uses fewer thread pool threads&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;strong&gt;Development&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;
      &lt;strong&gt;Open and Collaborative&lt;/strong&gt; Development on
      &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector&#34;&gt;GitHub&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      Closed Development Roadmap. Code is viewable on
      &lt;a href=&#34;https://github.com/mysql/mysql-connector-net&#34;&gt;GitHub&lt;/a&gt;,
      some issues addressed in &lt;a href=&#34;http://forums.mysql.com/list.php?38&#34;&gt;Forums&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      Get involved!  View
      &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/milestones&#34;&gt;our roadmap&lt;/a&gt;,
      discuss &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues&#34;&gt;issues&lt;/a&gt;,
      contribute &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pulls&#34;&gt;pull requests&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;
      The &lt;strong&gt;&lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/blob/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;a href=&#34;http://www.gnu.org/licenses/old-licenses/gpl-2.0.html&#34;&gt;GPLv2&lt;/a&gt;
      with &lt;a href=&#34;http://www.mysql.com/about/legal/licensing/foss-exception/&#34;&gt;FOSS Exception&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;More Permissive&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Installing</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/installing/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/installing/</guid>
      <description>

&lt;h1 id=&#34;installing&#34;&gt;Installing&lt;/h1&gt;

&lt;p&gt;The recommended way of installing MySqlConnector is through &lt;a href=&#34;https://www.nuget.org/packages/MySqlConnector/&#34;&gt;NuGet&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;automatically&#34;&gt;Automatically&lt;/h3&gt;

&lt;p&gt;If using the new project system, run: &lt;code&gt;dotnet add package MySqlConnector&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or, in Visual Studio, use the &lt;em&gt;NuGet Package Manager&lt;/em&gt; to browse for and install &lt;code&gt;MySqlConnector&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;manually&#34;&gt;Manually&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Add MySqlConnector to the dependencies in your &lt;code&gt;csproj&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;AssemblyTitle&amp;gt;My Application&amp;lt;/AssemblyTitle&amp;gt;
    &amp;lt;Description&amp;gt;A great application&amp;lt;/Description&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netcoreapp2.0&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;MySqlConnector&amp;quot; Version=&amp;quot;0.30.0&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Run the command &lt;code&gt;dotnet restore&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySqlConnection</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-connection/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-connection/</guid>
      <description>

&lt;h1 id=&#34;mysqlconnection&#34;&gt;MySqlConnection&lt;/h1&gt;

&lt;p&gt;MySqlConnection implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbconnection&#34;&gt;ADO.NET DbConnection class&lt;/a&gt;;
please refer to its documentation.&lt;/p&gt;

&lt;p&gt;Additionally, MySqlConnection provides the following public properties and methods that may be used:&lt;/p&gt;

&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public MySqlConnection()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Parameterless constructor&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public MySqlConnection(string connectionString)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Constructor that set the connection string&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;additional-properties&#34;&gt;Additional Properties&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public int ServerThread&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Connection ID from MySQL Server&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;additional-instance-methods&#34;&gt;Additional Instance Methods&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public Task&amp;lt;MySqlTransaction&amp;gt; BeginTransactionAsync(CancellationToken cancellationToken = default(CancellationToken))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of BeginTransaction&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public Task&amp;lt;MySqlTransaction&amp;gt; BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken = default(CancellationToken))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of BeginTransaction that supports setting Isolation Level&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;additional-static-methods&#34;&gt;Additional Static Methods&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public static void ClearPool(MySqlConnection connection)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Clears the connection pool that the connection belongs to&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public static Task ClearPoolAsync(MySqlConnection connection)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of ClearPool&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public static Task ClearPoolAsync(MySqlConnection connection, CancellationToken cancellationToken)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of ClearPool with cancellation token support&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public static void ClearAllPools()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Clears all connection pools in the entire application&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public static Task ClearAllPoolsAsync()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of ClearAllPoolsAsync&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public static Task ClearAllPoolsAsync(CancellationToken cancellationToken)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of ClearAllPoolsAsync with cancellation token support&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Known Issues</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/known-issues/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/known-issues/</guid>
      <description>

&lt;h1 id=&#34;known-issues&#34;&gt;Known Issues&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Prepared statements are not supported: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/397&#34;&gt;#397&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;MySQL spatial data types are not supported: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/70&#34;&gt;#70&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some &lt;code&gt;MySql.Data&lt;/code&gt; connection string settings are not supported by this library. See &lt;a href=&#34;connection-options/&#34;&gt;Connection Options&lt;/a&gt; for a list of supported options.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Migrating from Connector/NET</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/migrating-from-connector-net/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/migrating-from-connector-net/</guid>
      <description>

&lt;h1 id=&#34;migrating-from-connector-net&#34;&gt;Migrating from Connector/NET&lt;/h1&gt;

&lt;h3 id=&#34;connection-string-differences&#34;&gt;Connection String Differences&lt;/h3&gt;

&lt;p&gt;MySqlConnector has some different default connection string options:&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width:20%&#34;&gt;Option&lt;/th&gt;
    &lt;th style=&#34;width:20%&#34;&gt;MySqlConnector&lt;/th&gt;
    &lt;th style=&#34;width:20%&#34;&gt;Oracle&#39;s Connector/NET&lt;/th&gt;
    &lt;th style=&#34;width:40%&#34;&gt;Notes&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;AllowPublicKeyRetrieval&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;(not configurable)&lt;/td&gt;
    &lt;td&gt;When using &lt;code&gt;sha256_password&lt;/code&gt; authentication, this option allows the RSA public key to be retrieved from the server
    (when not using a secure connection). It&#39;s &lt;code&gt;false&lt;/code&gt; by default to avoid disclosing the password to a malicious proxy.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;ConnectionReset&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;MySqlConnector always resets pooled connections by default so that the connection is in a known state. This fixes &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=77421&#34;&gt;MySQL Bug 77421&lt;/a&gt;.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;LoadBalance&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;RoundRobin&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;(not configurable, effective default is &lt;code&gt;FailOver&lt;/code&gt;)&lt;/td&gt;
    &lt;td&gt;Connector/NET currently has &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=81650&#34; title=&#34;MySQL bug #81650&#34;&gt;a bug&lt;/a&gt; that prevents multiple host names being used.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;ServerRSAPublicKeyFile&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;(no default)&lt;/td&gt;
    &lt;td&gt;(not configurable)&lt;/td&gt;
    &lt;td&gt;Specify a file containing the server&#39;s RSA public key to allow &lt;code&gt;sha256_password&lt;/code&gt; authentication over an insecure connection.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;UseAffectedRows&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;This also affects the behavior of the &lt;code&gt;ROW_COUNT&lt;/code&gt; function. &lt;code&gt;UseAffectedRows=true&lt;/code&gt; is the default in most other languages (C++, PHP, others)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Some connection string options that are supported in Connector/NET are not supported in MySqlConnector. For a full list of options that are
supported in MySqlConnector, see the &lt;a href=&#34;connection-options&#34;&gt;Connection Options&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;transactionscope&#34;&gt;TransactionScope&lt;/h3&gt;

&lt;p&gt;MySqlConnector adds full distributed transaction support (for client code using &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.transactions.transactionscope.aspx&#34;&gt;&lt;code&gt;TransactionScope&lt;/code&gt;&lt;/a&gt;),
while Connector/NET uses regular database transactions. As a result, code that uses &lt;code&gt;TransactionScope&lt;/code&gt;
may execute differently with MySqlConnector. To get Connector/NET-compatible behavior, remove
&lt;code&gt;TransactionScope&lt;/code&gt; and use &lt;code&gt;BeginTransaction&lt;/code&gt;/&lt;code&gt;Commit&lt;/code&gt; directly.&lt;/p&gt;

&lt;h3 id=&#34;mysqlconnection&#34;&gt;MySqlConnection&lt;/h3&gt;

&lt;p&gt;Connector/NET allows a &lt;code&gt;MySqlConnection&lt;/code&gt; object to be reused after it has been disposed. MySqlConnector requires a new &lt;code&gt;MySqlConnection&lt;/code&gt;
object to be created. See &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/331&#34;&gt;#331&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3 id=&#34;mysqlcommand&#34;&gt;MySqlCommand&lt;/h3&gt;

&lt;p&gt;Connector/NET allows a command to be executed even when &lt;code&gt;MySqlCommand.Transaction&lt;/code&gt; references a commited, rolled back, or
disposed &lt;code&gt;MySqlTransaction&lt;/code&gt;. MySqlConnector will throw an &lt;code&gt;InvalidOperationException&lt;/code&gt; if the &lt;code&gt;MySqlCommand.Transaction&lt;/code&gt;
property doesn&amp;rsquo;t reference the active transaction. See &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/333&#34;&gt;#333&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3 id=&#34;bugs-present-in-connector-net-that-are-fixed-in-mysqlconnector&#34;&gt;Bugs present in Connector/NET that are fixed in MySqlConnector&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=37283&#34;&gt;#37283&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=70587&#34;&gt;#70587&lt;/a&gt;: Distributed transactions are not supported&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=50773&#34;&gt;#50773&lt;/a&gt;: Can&amp;rsquo;t use multiple connections within one TransactionScope&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=61477&#34;&gt;#61477&lt;/a&gt;: &lt;code&gt;ColumnOrdinal&lt;/code&gt; in schema table is 1-based&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=66476&#34;&gt;#66476&lt;/a&gt;: Connection pool uses queue instead of stack&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=70111&#34;&gt;#70111&lt;/a&gt;: &lt;code&gt;Async&lt;/code&gt; methods execute synchronously&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=70686&#34;&gt;#70686&lt;/a&gt;: &lt;code&gt;TIME(3)&lt;/code&gt; and &lt;code&gt;TIME(6)&lt;/code&gt; fields serialize milliseconds incorrectly&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=72494&#34;&gt;#72494&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=83330&#34;&gt;#83330&lt;/a&gt;: EndOfStreamException inserting large blob with UseCompression=True&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=73610&#34;&gt;#73610&lt;/a&gt;: Invalid password exception has wrong number&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=73788&#34;&gt;#73788&lt;/a&gt;: Can&amp;rsquo;t use &lt;code&gt;DateTimeOffset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=75917&#34;&gt;#75917&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=76597&#34;&gt;#76597&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=77691&#34;&gt;#77691&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78650&#34;&gt;#78650&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78919&#34;&gt;#78919&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=80921&#34;&gt;#80921&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=82136&#34;&gt;#82136&lt;/a&gt;: &amp;ldquo;Reading from the stream has failed&amp;rdquo; when connecting to a server&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=77421&#34;&gt;#77421&lt;/a&gt;: Connection is not reset when pulled from the connection pool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78426&#34;&gt;#78426&lt;/a&gt;: Unknown database exception has wrong number&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78760&#34;&gt;#78760&lt;/a&gt;: Error when using tabs and newlines in SQL statements&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78917&#34;&gt;#78917&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=79196&#34;&gt;#79196&lt;/a&gt;, &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=82292&#34;&gt;#82292&lt;/a&gt;: &lt;code&gt;TINYINT(1)&lt;/code&gt; values start being returned as &lt;code&gt;sbyte&lt;/code&gt; after &lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=80030&#34;&gt;#80030&lt;/a&gt;: Slow to connect with pooling disabled&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=81650&#34;&gt;#81650&lt;/a&gt;: &lt;code&gt;Server&lt;/code&gt; connection string option may now contain multiple, comma separated hosts that will be tried in order until a connection succeeds&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=83329&#34;&gt;#83229&lt;/a&gt;: &amp;ldquo;Unknown command&amp;rdquo; exception inserting large blob with UseCompression=True&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=84220&#34;&gt;#84220&lt;/a&gt;: Cannot call a stored procedure with &lt;code&gt;.&lt;/code&gt; in its name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=84701&#34;&gt;#84701&lt;/a&gt;: Can&amp;rsquo;t create a paramter using a 64-bit enum with a value greater than int.MaxValue&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=85185&#34;&gt;#85185&lt;/a&gt;: &lt;code&gt;ConnectionReset=True&lt;/code&gt; does not preserve connection charset&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=86263&#34;&gt;#86263&lt;/a&gt;: Transaction isolation level affects all transactions in session&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=87307&#34;&gt;#87307&lt;/a&gt;: NextResult hangs instead of timing out&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=87316&#34;&gt;#87316&lt;/a&gt;: MySqlCommand.CommandTimeout can be set to a negative value&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=87868&#34;&gt;#87868&lt;/a&gt;: &lt;code&gt;ColumnSize&lt;/code&gt; in schema table is incorrect for &lt;code&gt;CHAR(36)&lt;/code&gt; and &lt;code&gt;BLOB&lt;/code&gt; columns&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=87876&#34;&gt;#87876&lt;/a&gt;: &lt;code&gt;IsLong&lt;/code&gt; is schema table is incorrect for &lt;code&gt;LONGTEXT&lt;/code&gt; and &lt;code&gt;LONGBLOB&lt;/code&gt; columns&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=88058&#34;&gt;#88058&lt;/a&gt;: &lt;code&gt;decimal(n, 0)&lt;/code&gt; has wrong &lt;code&gt;NumericPrecision&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=88124&#34;&gt;#88124&lt;/a&gt;: CommandTimeout isn&amp;rsquo;t reset when calling Read/NextResult&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MySqlCommand</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-command/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-command/</guid>
      <description>

&lt;h1 id=&#34;mysqlcommand&#34;&gt;MySqlCommand&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;MySqlCommand&lt;/code&gt; implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbcommand&#34;&gt;ADO.NET DbCommand class&lt;/a&gt;;
please refer to its documentation.&lt;/p&gt;

&lt;p&gt;Additionally, &lt;code&gt;MySqlCommand&lt;/code&gt; provides the following public properties and methods that may be used:&lt;/p&gt;

&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public MySqlCommand()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Parameterless constructor&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public MySqlCommand(string commandText)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;constructor accepting command SQL&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public MySqlCommand(MySqlConnection connection, MySqlTransaction transaction)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;constructor accepting connection object and transaction object&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public MySqlCommand(string commandText, MySqlConnection connection)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;constructor accepting command SQL and connection object&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public MySqlCommand(string commandText, MySqlConnection connection, MySqlTransaction transaction)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;constructor accepting command SQL, connection object, and transaction object&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;additional-properties&#34;&gt;Additional Properties&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public long LastInsertedId&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Holds the first automatically-generated ID for a value inserted in an &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; column in the last statement.
See &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_last-insert-id&#34;&gt;&lt;code&gt;LAST_INSERT_ID()&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Version History</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/version-history/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/version-history/</guid>
      <description>

&lt;h1 id=&#34;version-history&#34;&gt;Version History&lt;/h1&gt;

&lt;h3 id=&#34;0-31-1&#34;&gt;0.31.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;InvalidOperationException&lt;/code&gt; if &lt;code&gt;MySqlBulkLoader&lt;/code&gt; is used inside a transaction (again): &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/300&#34;&gt;#300&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Breaking&lt;/strong&gt; Remove &lt;code&gt;MySqlBulkLoader.Transaction&lt;/code&gt; property (added in 0.24.0); &lt;code&gt;MySqlBulkLoader&lt;/code&gt; will always use the ambient transaction, if any. This matches Connector/NET API &amp;amp; behaviour.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-31-0&#34;&gt;0.31.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;MinimumPoolSize&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/85&#34;&gt;#85&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Implement server load balancing with new &lt;code&gt;LoadBalance&lt;/code&gt; connection string setting: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/226&#34;&gt;#226&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add SourceLink.&lt;/li&gt;
&lt;li&gt;Wrap &lt;code&gt;EndOfStreamException&lt;/code&gt; in &lt;code&gt;MySqlException&lt;/code&gt; when connecting fails: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/388&#34;&gt;#388&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;StackOverflowException&lt;/code&gt; when reading large BLOBs asynchronously.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t set &lt;code&gt;Transaction&lt;/code&gt; on new &lt;code&gt;MySqlCommand&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/389&#34;&gt;#389&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ignore &lt;code&gt;MySqlConnection.Cancel&lt;/code&gt; when connection is broken: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/386&#34;&gt;#386&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Improve internal code organisation: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/376&#34;&gt;#376&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-30-0&#34;&gt;0.30.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Breaking&lt;/strong&gt; Remove &lt;code&gt;BufferResultSets&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/378&#34;&gt;#378&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The assembly is now strong-named: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/224&#34;&gt;#224&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-29-4&#34;&gt;0.29.4&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix exception in &lt;code&gt;MySqlTransaction.Dispose&lt;/code&gt; if the underlying connection is closed or faulted: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/383&#34;&gt;#383&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-29-3&#34;&gt;0.29.3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remove &lt;code&gt;System.Runtime.InteropServices.RuntimeInformation&lt;/code&gt; dependency on full framework: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/381&#34;&gt;#381&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-29-2&#34;&gt;0.29.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix an exception if &lt;code&gt;MySqlDataReader.GetOrdinal&lt;/code&gt; was called before &lt;code&gt;Read&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/379&#34;&gt;#379&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-29-1&#34;&gt;0.29.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Work around Amazon Aurora &lt;code&gt;DateTime&lt;/code&gt; conversion issue: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/364&#34;&gt;#364&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;NotSupportedException&lt;/code&gt; in &lt;code&gt;MySqlParameter&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/367&#34;&gt;#367&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Breaking&lt;/strong&gt; Remove a number of &lt;code&gt;MySqlErrorCode&lt;/code&gt; enum values (to reduce library size).&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/dgilbert&#34;&gt;Duane Gilbert&lt;/a&gt; and &lt;a href=&#34;https://github.com/Naragato&#34;&gt;Naragato&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-29-0&#34;&gt;0.29.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Breaking&lt;/strong&gt; Implement &lt;code&gt;MySqlConnectionStringBuilder.DefaultCommandTimeout&lt;/code&gt; and &lt;code&gt;MySqlCommand.CommandTimeout&lt;/code&gt; with a default of 30 seconds: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/67&#34;&gt;#67&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;This may cause long-running queries to throw an exception instead of succeeding; as a workaround, increase &lt;code&gt;CommandTimeout&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Expose &lt;code&gt;MySqlDbType&lt;/code&gt; and &lt;code&gt;MySqlCommand.MySqlDbType&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/362&#34;&gt;#362&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;MySqlConnector adds &lt;code&gt;MySqlDbType.Bool&lt;/code&gt; to represent a &lt;code&gt;TINYINT(1)&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;Return correct values for &lt;code&gt;ProviderType&lt;/code&gt; in &lt;code&gt;GetColumnSchema&lt;/code&gt;/&lt;code&gt;GetSchemaTable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Implement &lt;code&gt;MySqlConnection.GetSchema&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/361&#34;&gt;#361&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Update documentation for .NET Core 2.0: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/372&#34;&gt;#372&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix information disclosure vulnerability related to &lt;code&gt;LOAD DATA LOCAL INFILE&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/334&#34;&gt;#334&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Improve async performance.&lt;/li&gt;
&lt;li&gt;Throw exception for unexpected API use: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/308&#34;&gt;#308&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/Drake103&#34;&gt;Gabden Ayazbayev&lt;/a&gt;, &lt;a href=&#34;https://github.com/Thorium&#34;&gt;Tuomas Hietanen&lt;/a&gt;, and &lt;a href=&#34;https://github.com/dustinsoftware&#34;&gt;Dustin Masters&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-28-2&#34;&gt;0.28.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Allow the auth plugin name in the initial handshake to be EOF-terminated: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/351&#34;&gt;#351&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-28-1&#34;&gt;0.28.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix garbage data being returned by &lt;code&gt;GetColumnSchema&lt;/code&gt;/&lt;code&gt;GetSchemaTable&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/354&#34;&gt;#354&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix incorrect &lt;code&gt;NumericPrecision&lt;/code&gt; for &lt;code&gt;decimal(n,0)&lt;/code&gt; columns: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/356&#34;&gt;#356&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-28-0&#34;&gt;0.28.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support &lt;code&gt;caching_sha2_password&lt;/code&gt; authentication for MySQL 8.0: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/329&#34;&gt;#329&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix inconsistent return value of &lt;code&gt;MySqlDataReader.HasRows&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/348&#34;&gt;#348&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/Drake103&#34;&gt;Drake103&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-27-0&#34;&gt;0.27.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;MySqlDataReader.GetColumnSchema&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/182&#34;&gt;#182&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Implement &lt;code&gt;MySqlDataReader.GetSchemaTable&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/307&#34;&gt;#307&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support MySQL Server 8.0.3 and MariaDB 10.2 collations: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/336&#34;&gt;#336&lt;/a&gt;, &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/337&#34;&gt;#337&lt;/a&gt;, &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/338&#34;&gt;#338&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Reduce allocations to improve performance: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/342&#34;&gt;#342&lt;/a&gt;, &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/343&#34;&gt;#343&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/elemount&#34;&gt;Alex Lee&lt;/a&gt; and &lt;a href=&#34;https://github.com/ddunkin&#34;&gt;Dave Dunkin&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-26-5&#34;&gt;0.26.5&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix hang closing connection with ClearDB on Azure: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/330&#34;&gt;#330&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/ktos&#34;&gt;Marcin Badurowicz&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-26-4&#34;&gt;0.26.4&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix overly-broad exception handler introduced in 0.26.3.&lt;/li&gt;
&lt;li&gt;Improve efficiency of code added in 0.26.3.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-26-3&#34;&gt;0.26.3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;HasRows&lt;/code&gt; incorrectly returning &lt;code&gt;false&lt;/code&gt; after all rows have been read: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/327&#34;&gt;#327&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;EndOfStreamException&lt;/code&gt; when reusing a pooled connection with Amazon Aurora.&lt;/li&gt;
&lt;li&gt;Reduce network roundtrips when opening a pooled connection (with the default settings of &lt;code&gt;Pooling=True;Connection Reset=true&lt;/code&gt;); see &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/258&#34;&gt;#258&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;System.*&lt;/code&gt; dependencies to 4.3.0 for .NET 4.5 and .NET 4.6 packages.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/bnabholz&#34;&gt;Brad Nabholz&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-26-2&#34;&gt;0.26.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support &lt;code&gt;CLIENT_DEPRECATE_EOF&lt;/code&gt; flag: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/322&#34;&gt;#322&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Throw better exception when a malformed packet is detected.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t allow sessions in an error state to be put back into the pool.&lt;/li&gt;
&lt;li&gt;Remove unsupported &lt;code&gt;CLIENT_PS_MULTI_RESULTS&lt;/code&gt; flag (sent during connection handshaking).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-26-1&#34;&gt;0.26.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Throw better exception when MySQL Server sends an old authentication method switch request packet: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/316&#34;&gt;#316&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Capture InnerException in &lt;code&gt;ActivateResultSet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/kobake&#34;&gt;kobake&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-26-0&#34;&gt;0.26.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add convenience methods that return derived types: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/313&#34;&gt;#313&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-25-1&#34;&gt;0.25.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Prevent exception being thrown from &lt;code&gt;MySqlSession.DisposeAsync&lt;/code&gt;, which could cause leaked connections: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/305&#34;&gt;#305&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-25-0&#34;&gt;0.25.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;netstandard2.0&lt;/code&gt; compile target: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/270&#34;&gt;#270&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-24-2&#34;&gt;0.24.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix leaked session when a &lt;code&gt;MySqlException&lt;/code&gt; is thrown because a query contains a user-defined variable and &lt;code&gt;Allow User Variables=false&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/305&#34;&gt;#305&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-24-1&#34;&gt;0.24.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Recover leaked sessions when &lt;code&gt;MySqlDataReader&lt;/code&gt; isn&amp;rsquo;t disposed: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/306&#34;&gt;#306&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-24-0&#34;&gt;0.24.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Breaking&lt;/strong&gt; Add &lt;code&gt;AllowPublicKeyRetrieval&lt;/code&gt; connection string setting, defaulted to &lt;code&gt;false&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/286&#34;&gt;#286&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;ServerRSAPublicKeyFile&lt;/code&gt; connection string setting.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fix hang in &lt;code&gt;MySqlDataReader.Dispose&lt;/code&gt; if function threw an exception: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/299&#34;&gt;#299&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;InvalidOperationException&lt;/code&gt; if &lt;code&gt;MySqlBulkLoader&lt;/code&gt; is used inside a transaction: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/300&#34;&gt;#300&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-23-0&#34;&gt;0.23.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support .NET 4.5: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/295&#34;&gt;#295&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Send client connection attributes: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/293&#34;&gt;#293&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dispose &lt;code&gt;X509Certificate2&lt;/code&gt; objects (.NET 4.6 and later): &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/275&#34;&gt;#275&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-22-0&#34;&gt;0.22.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add server certificate validation via &lt;code&gt;MySqlConnectionStringBuilder.CACertificateFile&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/280&#34;&gt;#280&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support &lt;code&gt;sha256_password&lt;/code&gt; authentication: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/281&#34;&gt;#281&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ignore &lt;code&gt;IOException&lt;/code&gt; in &lt;code&gt;TryPingAsync&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/289&#34;&gt;#289&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix &amp;ldquo;Aborted connection&amp;rdquo; server errors when &lt;code&gt;MySqlConnection&lt;/code&gt; isn&amp;rsquo;t disposed: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/290&#34;&gt;#290&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run integration tests on MySQL Server 5.6, MySQL Server 5.7, MariaDB 10.3, Percona Server 5.7.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-21-0&#34;&gt;0.21.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;MySqlHelper.EscapeString&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/277&#34;&gt;#277&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-20-2&#34;&gt;0.20.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix bugs where objects holding unmanaged resources weren&amp;rsquo;t disposed: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/275&#34;&gt;#275&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-20-1&#34;&gt;0.20.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix bug retrieving a connection from the pool when using Amazon IAM Authentication: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/269&#34;&gt;#269&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-20-0&#34;&gt;0.20.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html&#34;&gt;Amazon RDS&lt;/a&gt; &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html&#34;&gt;IAM Authentication&lt;/a&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/268&#34;&gt;#268&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-19-5&#34;&gt;0.19.5&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix duration of transaction isolation level: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/263&#34;&gt;#263&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix crash sending a GUID containing &lt;code&gt;0x27&lt;/code&gt; or &lt;code&gt;0x5C&lt;/code&gt; when &lt;code&gt;OldGuids=true&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/265&#34;&gt;#265&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/adampoit&#34;&gt;Adam Poit&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-19-4&#34;&gt;0.19.4&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;NotImplementedException&lt;/code&gt; in &lt;code&gt;GetFieldType&lt;/code&gt; and &lt;code&gt;GetDataTypeName&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/261&#34;&gt;#261&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-19-3&#34;&gt;0.19.3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix authentication against Azure Database for MySQL: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/259&#34;&gt;#259&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support enum parameter values: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/255&#34;&gt;#255&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;CancellationToken&lt;/code&gt; being ignored by &lt;code&gt;ChangeDatabaseAsync&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/253&#34;&gt;#253&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;NullReferenceException&lt;/code&gt; being thrown from &lt;code&gt;MySqlConnection.CloseDatabase&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/Nicholi&#34;&gt;Nicholas Schell&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-19-2&#34;&gt;0.19.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix connection pool exhaustion if connections aren&amp;rsquo;t disposed: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/251&#34;&gt;#251&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix potential &lt;code&gt;NullReferenceException&lt;/code&gt; in &lt;code&gt;MySqlDataReader.Dispose&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-19-1&#34;&gt;0.19.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix incorrect return value from &lt;code&gt;ExecuteNonQuery&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/250&#34;&gt;#250&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Improve performance when retrieving large BLOBs: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/249&#34;&gt;#249&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/adampoit&#34;&gt;Adam Poit&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-19-0&#34;&gt;0.19.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Improve performance of common scenarios: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/245&#34;&gt;#245&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-18-3&#34;&gt;0.18.3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix query interrupted exception after canceling a completed query: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/248&#34;&gt;#248&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/adampoit&#34;&gt;Adam Poit&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-18-2&#34;&gt;0.18.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix excessive memory usage with &lt;code&gt;BufferResultSets=true&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/244&#34;&gt;#244&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-18-1&#34;&gt;0.18.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support new MySQL Server 8.0.1 collations: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/242&#34;&gt;#242&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Specify preferred collation when resetting connection: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/243&#34;&gt;#243&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-18-0&#34;&gt;0.18.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ee818755.aspx&#34;&gt;&lt;code&gt;System.Transactions&lt;/code&gt; transaction processing&lt;/a&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/13&#34;&gt;#13&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;AutoEnlist&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/241&#34;&gt;#241&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Throw better exception for unsupported &lt;code&gt;ParameterDirection&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/234&#34;&gt;#234&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;StackOverflowException&lt;/code&gt; reading a large blob: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/239&#34;&gt;#239&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-17-0&#34;&gt;0.17.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement cancellation of the active reader: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/3&#34;&gt;#3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;MySqlErrorCode&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/232&#34;&gt;#232&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Implement a connection pool reaper to close idle connections: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/217&#34;&gt;#217&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;ConnectionIdleTimeout&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/218&#34;&gt;#218&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Implement &lt;code&gt;ConnectionLifeTime&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/212&#34;&gt;#212&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-16-2&#34;&gt;0.16.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix exceptions when server resets the connection: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/221&#34;&gt;#221&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-16-1&#34;&gt;0.16.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Throw a better exception when &lt;code&gt;max_allowed_packet&lt;/code&gt; is exceeded: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/40&#34;&gt;#40&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-16-0&#34;&gt;0.16.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;MySqlParameterCollection.AddWithValue&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/127&#34;&gt;#127&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/michi84o&#34;&gt;michi84o&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-15-2&#34;&gt;0.15.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Include help on &lt;code&gt;AllowUserVariables&lt;/code&gt; in exception message: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/206&#34;&gt;#206&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-15-1&#34;&gt;0.15.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;NullReferenceException&lt;/code&gt; in &lt;code&gt;MySqlConnection.Database&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/205&#34;&gt;#205&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-15-0&#34;&gt;0.15.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;MySqlConnection.ChangeDatabase&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/201&#34;&gt;#201&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Buffer Result Sets&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/202&#34;&gt;#202&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-14-1&#34;&gt;0.14.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix exception when &lt;code&gt;MySqlDataReader&lt;/code&gt; isn&amp;rsquo;t disposed: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/196&#34;&gt;#196&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-14-0&#34;&gt;0.14.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;System.*&lt;/code&gt; package references: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/190&#34;&gt;#190&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-13-0&#34;&gt;0.13.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;MySqlBulkLoader&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/15&#34;&gt;#15&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/michi84o&#34;&gt;gitsno&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-12-0&#34;&gt;0.12.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add support for &lt;code&gt;DateTimeOffset&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/172&#34;&gt;#172&lt;/a&gt;, &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/175&#34;&gt;#175&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/sebastienros&#34;&gt;Sébastien Ros&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-6&#34;&gt;0.11.6&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;PlatformNotSupportedException&lt;/code&gt; on AWS Lambda: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/170&#34;&gt;#170&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/SebastianC&#34;&gt;Sebastian&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-5&#34;&gt;0.11.5&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Further improve async and sync performance: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/164&#34;&gt;#164&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-4&#34;&gt;0.11.4&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No changes in this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-3&#34;&gt;0.11.3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Improve async performance: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/164&#34;&gt;#164&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-2&#34;&gt;0.11.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix InvalidCastException when using aggregate functions: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/54&#34;&gt;#54&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-1&#34;&gt;0.11.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Handle &lt;code&gt;IOException&lt;/code&gt; in &lt;code&gt;MySqlSession.DisposeAsync&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/159&#34;&gt;#159&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-0&#34;&gt;0.11.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement the &lt;code&gt;SslMode=Preferred&lt;/code&gt; connection string option and make it the default: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/158&#34;&gt;#158&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-10-0&#34;&gt;0.10.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Change minimum supported .NET Framework version to .NET 4.5.1: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/154&#34;&gt;#154&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-9-2&#34;&gt;0.9.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix MySqlConnection.DataSource with Unix Domain Socket: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/152&#34;&gt;#152&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-9-1&#34;&gt;0.9.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;SocketException&lt;/code&gt; when calling &lt;code&gt;OpenAsync&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/150&#34;&gt;#150&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-9-0&#34;&gt;0.9.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;Treat Tiny As Boolean&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/141&#34;&gt;#141&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-8-0&#34;&gt;0.8.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;Keep Alive&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/132&#34;&gt;#132&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-7-4&#34;&gt;0.7.4&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;Packet received out-of-order&lt;/code&gt; exception with &lt;code&gt;UseCompression=true&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/146&#34;&gt;#146&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-7-3&#34;&gt;0.7.3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;GetDataTypeName&lt;/code&gt; for &lt;code&gt;ENUM&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; columns: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/52&#34;&gt;#52&lt;/a&gt;, &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/71&#34;&gt;#71&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-7-2&#34;&gt;0.7.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix authentication for MySQL Server 5.1: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/139&#34;&gt;#139&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-7-1&#34;&gt;0.7.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;NextResult&lt;/code&gt; incorrectly returning &lt;code&gt;true&lt;/code&gt;, which may cause problems with Dapper&amp;rsquo;s &lt;code&gt;QueryMultiple&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/135&#34;&gt;#135&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Reduce memory usage related to &lt;code&gt;Enum.HasFlag&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/137&#34;&gt;#137&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-7-0&#34;&gt;0.7.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement stored procedure support: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/19&#34;&gt;#19&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;Known issue: &lt;code&gt;NextResult&lt;/code&gt; incorrectly returns &lt;code&gt;true&lt;/code&gt;, which may cause problems with Dapper&amp;rsquo;s &lt;code&gt;QueryMultiple&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/135&#34;&gt;#135&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-6-2&#34;&gt;0.6.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;NullReferenceException&lt;/code&gt; when &lt;code&gt;MySqlParameter.Value == null&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/126&#34;&gt;#126&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-6-1&#34;&gt;0.6.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;AggregateException&lt;/code&gt; going unhandled in &lt;code&gt;OpenAsync&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/124&#34;&gt;#124&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix SSL over Unix domain sockets.&lt;/li&gt;
&lt;li&gt;Reduce allocations when using SSL certificates.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-6-0&#34;&gt;0.6.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;UseCompression&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/31&#34;&gt;#31&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add support for Unix domain sockets: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/118&#34;&gt;#118&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-5-0&#34;&gt;0.5.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;UseAffectedRows&lt;/code&gt; connection string option. (Note that the default value is &lt;code&gt;true&lt;/code&gt;, unlike &lt;code&gt;MySql.Data&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-4-0&#34;&gt;0.4.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Rename &lt;code&gt;SslMode&lt;/code&gt; enum to &lt;code&gt;MySqlSslMode&lt;/code&gt; (for compatibility with &lt;code&gt;MySql.Data&lt;/code&gt;):&lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/93&#34;&gt;#102&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-3-0&#34;&gt;0.3.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add SSL support and &lt;code&gt;SslMode&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/88&#34;&gt;#88&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rewrite protocol serialization layer to support SSL and make adding compression easier: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/93&#34;&gt;#93&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-2-1&#34;&gt;0.2.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add more diagnostics for unsupported auth plugins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-2-0&#34;&gt;0.2.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;MySqlConnectionStringBuilder.ForceSynchronous&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/91&#34;&gt;#91&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/ejball&#34;&gt;Ed Ball&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-1-0&#34;&gt;0.1.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First non-alpha release. Supports core data access scenarios with common ORMs.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Connection Options</title>
      <link>https://mysql-net.github.io/MySqlConnector/connection-options/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/connection-options/</guid>
      <description>

&lt;h1 id=&#34;connection-options&#34;&gt;Connection Options&lt;/h1&gt;

&lt;p&gt;MySqlConnector supports a subset of Oracle&amp;rsquo;s &lt;a href=&#34;https://dev.mysql.com/doc/connector-net/en/connector-net-connection-options.html&#34;&gt;Connector/NET connection options&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;base-options&#34;&gt;Base Options&lt;/h2&gt;

&lt;p&gt;These are the basic options that need to be defined to connect to a MySQL database.&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Name&lt;/th&gt;
    &lt;th style=&#34;width: 10%&#34;&gt;Default&lt;/th&gt;
    &lt;th style=&#34;width: 70%&#34;&gt;Description&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;Host, Server, Data Source, DataSource, Address, Addr, Network Address&lt;/td&gt;
    &lt;td&gt;localhost&lt;/td&gt;
    &lt;td&gt;The host name or network address of the MySQL Server to which to connect. Multiple hosts can be specified in a comma-delimited list.&lt;br&gt;On Unix-like systems, this can be a fully qualified path to a MySQL socket file, which will cause a Unix socket to be used instead of a TCP/IP socket. Only a single socket name can be specified.&lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;Port&lt;/td&gt;
    &lt;td&gt;3306&lt;/td&gt;
    &lt;td&gt;The TCP port on which MySQL Server is listening for connections.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;User Id, UserID, Username, Uid, User name, User&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;The MySQL user ID.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Password, pwd&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;The password for the MySQL user.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Database, Initial Catalog&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;(Optional) The case-sensitive name of the initial database to use. This may be required if the MySQL user account only has access rights to particular databases on the server.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;ssl-tls-options&#34;&gt;SSL/TLS Options&lt;/h2&gt;

&lt;p&gt;These are the options that need to be used in order to configure a connection to use SSL/TLS.&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Name&lt;/th&gt;
    &lt;th style=&#34;width: 10%&#34;&gt;Default&lt;/th&gt;
    &lt;th style=&#34;width: 70%&#34;&gt;Description&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;SSL Mode, SslMode&lt;/td&gt;
    &lt;td&gt;Preferred&lt;/td&gt;
    &lt;td&gt;This option has the following values:
      &lt;ul&gt;
        &lt;li&gt;&lt;b&gt;Preferred&lt;/b&gt; - (this is the default). Use SSL if the server supports it.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;None&lt;/b&gt; - Do not use SSL.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;Required&lt;/b&gt; - Always use SSL. Deny connection if server does not support SSL. Does not validate CA or hostname.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;VerifyCA&lt;/b&gt; - Always use SSL. Validates the CA but tolerates hostname mismatch.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;VerifyFull&lt;/b&gt; - Always use SSL. Validates CA and hostname.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Certificate File, CertificateFile&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Specifies the path to a certificate file in a PEM Encoded (.pem) or PKCS #12 (.pfx) format.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Certificate Password, CertificatePassword   &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Specifies the password for the certificate specified using the &lt;code&gt;CertificateFile&lt;/code&gt; option. Not required if the certificate file is not password protected.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;CA Certificate File, CACertificateFile&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;This option specifies the path to a CA certificate file in a PEM Encoded (.pem) format. This should be used in with &lt;code&gt;SslMode=VerifyCA&lt;/code&gt; or &lt;code&gt;SslMode=VerifyFull&lt;/code&gt; to enable verification of a CA certificate that is not trusted by the Operating System&#39;s certificate store.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;connection-pooling-options&#34;&gt;Connection Pooling Options&lt;/h2&gt;

&lt;p&gt;Connection pooling is enabled by default. These options are used to configure it.&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Name&lt;/th&gt;
    &lt;th style=&#34;width: 10%&#34;&gt;Default&lt;/th&gt;
    &lt;th style=&#34;width: 70%&#34;&gt;Description&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;Pooling&lt;/td&gt;
    &lt;td&gt;true&lt;/td&gt;
    &lt;td&gt;Enables connection pooling. When pooling is enabled, &lt;code&gt;MySqlConnection.Open&lt;/code&gt; retrieves an open connection from the pool if one is available (opening a new connection if not), and &lt;code&gt;Close&lt;/code&gt;/&lt;code&gt;Dispose&lt;/code&gt; returns the open connection to the pool.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Connection Lifetime, ConnectionLifeTime&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;Controls the maximum length of time a connection to the server can be open. Connections that are returned to the pool are destroyed if it&#39;s been more than &lt;code&gt;ConnectionLifeTime&lt;/code&gt; seconds since the connection was created. The default value of zero (0) means pooled connections will never incur a ConnectionLifeTime timeout.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Connection Reset, ConnectionReset   &lt;/td&gt;
    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;If &lt;code&gt;true&lt;/code&gt;, the connection state is reset when it is retrieved from the pool. The default value of &lt;code&gt;true&lt;/code&gt; ensures that the connection is in the same state whether it&#39;s newly created or retrieved from the pool. A value of &lt;code&gt;false&lt;/code&gt; avoids making an additional server round trip when obtaining a connection, but the connection state is not reset, meaning that session variables and other session state changes from any previous use of the connection are carried over.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Connection Idle Timeout, ConnectionIdleTimeout&lt;/td&gt;
    &lt;td&gt;180&lt;/td&gt;
    &lt;td&gt;The amount of time in seconds that a connection can remain idle in the pool. Any connection that is idle for longer is subject to being closed by a background task that runs every minute, unless there are only MinimumPoolSize connections left in the pool. A value of zero (0) means pooled connections will never incur a ConnectionIdleTimeout, and if the pool grows to its maximum size, it will never get smaller.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Maximum Pool Size, Max Pool Size, MaximumPoolsize, maxpoolsize&lt;/td&gt;
    &lt;td&gt;100&lt;/td&gt;
    &lt;td&gt;The maximum number of connections allowed in the pool.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Minimum Pool Size, Min Pool Size, MinimumPoolSize, minpoolsize&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;The minimum number of connections to leave in the pool if ConnectionIdleTimeout is reached.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;other-options&#34;&gt;Other Options&lt;/h2&gt;

&lt;p&gt;These are the other options that MySqlConnector supports. They are set to sensible defaults and typically do not need to be tweaked.&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Name&lt;/th&gt;
    &lt;th style=&#34;width: 10%&#34;&gt;Default&lt;/th&gt;
    &lt;th style=&#34;width: 70%&#34;&gt;Description&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;AllowPublicKeyRetrieval, Allow Public Key Retrieval&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;If the user account uses &lt;code&gt;sha256_password&lt;/code&gt; authentication, the password must be protected during transmission; TLS is the preferred mechanism for this,
      but if it is not available then RSA public key encryption will be used. To specify the server&#39;s RSA public key, use the &lt;code&gt;ServerRSAPublicKeyFile&lt;/code&gt; connection
      string setting, or set &lt;code&gt;AllowPublicKeyRetrieval=True&lt;/code&gt; to allow the client to automatically request the public key from the server. Note that &lt;code&gt;AllowPublicKeyRetrieval=True&lt;/code&gt;
      could allow a malicious proxy to perform a MITM attack to get the plaintext password, so it is &lt;code&gt;False&lt;/code&gt; by default and must be explicitly enabled.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;AllowUserVariables, Allow User Variables&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;Allows user-defined variables (prefixed with &lt;code&gt;@&lt;/code&gt;) to be used in SQL statements. The default value (&lt;code&gt;false&lt;/code&gt;)
    only allows &lt;code&gt;@&lt;/code&gt;-prefixed names to refer to command parameters.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Compress, Use Compression, UseCompression&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;If true (and if the server supports compression), compresses packets sent between client and server. This option is unlikely to be useful in
      practice unless there is a high-latency or low-bandwidth network link between the application and the database server. You should measure
      performance with and without this option to determine if it&#39;s beneficial in your environment.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Connect Timeout, Connection Timeout, ConnectionTimeout&lt;/td&gt;
    &lt;td&gt;15&lt;/td&gt;
    &lt;td&gt;The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert Zero Datetime, ConvertZeroDateTime&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;True to have MySqlDataReader.GetValue() and MySqlDataReader.GetDateTime() return DateTime.MinValue for date or datetime columns that have disallowed values.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Default Command Timeout, Command Timeout, DefaultCommandTimeout&lt;/td&gt;
    &lt;td&gt;30&lt;/td&gt;
    &lt;td&gt;The length of time (in seconds) each command can execute before timing out and throwing an exception, or zero to disable timeouts.
      See the note in the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.commandtimeout&#34;&gt;Microsoft documentation&lt;/a&gt;
      for more explanation of how this is determined.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Keep Alive, Keepalive&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;TCP Keepalive idle time. A value of 0 indicates that the OS Default keepalive settings are used.
    On Windows, a value greater than 0 is the idle connection time, measured in seconds, before the first keepalive packet is sent.
    Due to limitations in .NET Core, Unix-based Operating Systems will always use the OS Default keepalive settings.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Load Balance, LoadBalance&lt;/td&gt;
    &lt;td&gt;RoundRobin&lt;/td&gt;
    &lt;td&gt;&lt;p&gt;The load-balancing strategy to use when &lt;code&gt;Host&lt;/code&gt; contains multiple, comma-delimited, host names.
      The options include:&lt;/p&gt;
      &lt;dl&gt;
        &lt;dt&gt;RoundRobin&lt;/dt&gt;
        &lt;dd&gt;Each new connection opened for this connection pool uses the next host name (sequentially with wraparound). Requires &lt;code&gt;Pooling=True&lt;/code&gt;. This is the default if &lt;code&gt;Pooling=True&lt;/code&gt;.&lt;/dd&gt;
        &lt;dt&gt;FailOver&lt;/dt&gt;
        &lt;dd&gt;Each new connection tries to connect to the first host; subsequent hosts are used only if connecting to the first one fails. This is the default if &lt;code&gt;Pooling=False&lt;/code&gt;.&lt;/dd&gt;
        &lt;dt&gt;Random&lt;/dt&gt;
        &lt;dd&gt;Servers are tried in a random order.&lt;/dd&gt;
        &lt;dt&gt;LeastConnections&lt;/dt&gt;
        &lt;dd&gt;Servers are tried in ascending order of number of currently-open connections in this connection pool. Requires &lt;code&gt;Pooling=True&lt;/code&gt;.
      &lt;/dl&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Old Guids, OldGuids&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt; The backend representation of a GUID type was changed from BINARY(16) to CHAR(36). This was done to allow developers to use the server function UUID() to populate a GUID table - UUID() generates a 36-character string. Developers of older applications can add &#39;Old Guids=true&#39; to the connection string to use a GUID of data type BINARY(16).&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Persist Security Info, PersistSecurityInfo&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;When set to false or no (strongly recommended), security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Resetting the connection string resets all connection string values, including the password. Recognized values are true, false, yes, and no.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ServerRSAPublicKeyFile, Server RSA Public Key File&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;For &lt;code&gt;sha256_password&lt;/code&gt; authentication. See comments under &lt;code&gt;AllowPublicKeyRetrieval&lt;/code&gt;.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Treat Tiny As Boolean, TreatTinyAsBoolean&lt;/td&gt;
    &lt;td&gt;true&lt;/td&gt;
    &lt;td&gt;When set to true, tinyint(1) values are returned as booleans. Setting this to false causes tinyint(1) to be returned as sbyte/byte.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Use Affected Rows, UseAffectedRows&lt;/td&gt;
    &lt;td&gt;true&lt;/td&gt;
    &lt;td&gt;When false, the connection reports found rows instead of changed (affected) rows.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>MySqlDataReader</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-data-reader/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-data-reader/</guid>
      <description>

&lt;h1 id=&#34;mysqldatareader&#34;&gt;MySqlDataReader&lt;/h1&gt;

&lt;p&gt;MySqlDataReader implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbdatareader&#34;&gt;ADO.NET DbDataReader class&lt;/a&gt;;
please refer to its documentation.&lt;/p&gt;

&lt;p&gt;Additionally, MySqlDataReader provides the following public properties and methods that may be used:&lt;/p&gt;

&lt;h3 id=&#34;additional-instance-methods&#34;&gt;Additional Instance Methods&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public sbyte GetSByte(int ordinal)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Gets the value of the specified column as an sbyte&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public DateTimeOffset GetDateTimeOffset(int ordinal)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Gets the value of the specified column as a DateTimeOffset with an offset of 0&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public ReadOnlyCollection&amp;lt;DbColumn&amp;gt; GetColumnSchema()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Implements the new &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.data.common.idbcolumnschemagenerator.getcolumnschema&#34;&gt;&lt;code&gt;IDbColumnSchemaGenerator.GetColumnSchema&lt;/code&gt;&lt;/a&gt; interface that returns metadata about the columns in the result set.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use with .NET Core MVC</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/net-core-mvc/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/net-core-mvc/</guid>
      <description>

&lt;h1 id=&#34;use-with-net-core-mvc-2-0&#34;&gt;Use with .NET Core MVC 2.0&lt;/h1&gt;

&lt;p&gt;This tutorial will walk through a basic .NET Core JSON API application that performs CRUD operations on
blog posts.  The code in this tutorial comes is an adaptation of &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/tree/master/tests/MySqlConnector.Performance&#34;&gt;MySqlConnector.Performance&lt;/a&gt;,
the performance application that is used to stress test MySqlConnector.&lt;/p&gt;

&lt;h3 id=&#34;initialize-mysql&#34;&gt;Initialize MySQL&lt;/h3&gt;

&lt;p&gt;Create a MySQL database and copy the following SQL to create a table called &lt;code&gt;BlogPost&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;CREATE TABLE IF NOT EXISTS `BlogPost` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Content` longtext,
  `Title` longtext,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;initialize-net-core-mvc&#34;&gt;Initialize .NET Core MVC&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;dotnet new webapi&lt;/code&gt; at the root to create the initial project, then run &lt;code&gt;dotnet add package MySqlConnector&lt;/code&gt;. You should have a working project at this point, use &lt;code&gt;dotnet run&lt;/code&gt; to verify the project builds and runs successfully.&lt;/p&gt;

&lt;h3 id=&#34;update-configuration-files&#34;&gt;Update Configuration Files&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;appsettings.json&lt;/code&gt; holds .NET Core logging levels and the ADO.NET Connection String:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;Logging&amp;quot;: {
        &amp;quot;IncludeScopes&amp;quot;: false,
        &amp;quot;LogLevel&amp;quot;: {
            &amp;quot;Default&amp;quot;: &amp;quot;Error&amp;quot;,
            &amp;quot;System&amp;quot;: &amp;quot;Error&amp;quot;,
            &amp;quot;Microsoft&amp;quot;: &amp;quot;Error&amp;quot;
        }
    },
    &amp;quot;ConnectionStrings&amp;quot;: {
        &amp;quot;DefaultConnection&amp;quot;: &amp;quot;server=127.0.0.1;user id=mysqltest;password=test;port=3306;database=blog;&amp;quot;,
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AppDb.cs&lt;/code&gt; is a disposable &lt;a href=&#34;overview/configuration/&#34;&gt;Application Database Object&lt;/a&gt;, adapted to read the ConnectionString
from the Configuration Object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using MySql.Data.MySqlClient;

namespace MySqlConnector.Performance
{
    public class AppDb : IDisposable
    {
        public MySqlConnection Connection;

        public AppDb(string connectionString)
        {
            Connection = new MySqlConnection(connectionString);
        }

        public void Dispose()
        {
            Connection.Close();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;net-core-startup&#34;&gt;.NET Core Startup&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Startup.cs&lt;/code&gt; contains runtime configuration and framework services. Add this call to &lt;code&gt;ConfigureServices&lt;/code&gt; to make an instance of &lt;code&gt;AppDb&lt;/code&gt; available to controller methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddTransient&amp;lt;AppDb&amp;gt;(_ =&amp;gt; new AppDb(Configuration[&amp;quot;ConnectionStrings:DefaultConnection&amp;quot;]));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our app is configured and we can focus on writing the core functionality!&lt;/p&gt;

&lt;h3 id=&#34;models&#34;&gt;Models&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;BlogPost.cs&lt;/code&gt; represents a single Blog Post, and contains Insert, Update, and Delete methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Data;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;
using Newtonsoft.Json;

namespace MySqlConnector.Performance.Models
{
    public class BlogPost
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Content { get; set; }

        [JsonIgnore]
        public AppDb Db { get; set; }

        public BlogPost(AppDb db=null)
        {
            Db = db;
        }

        public async Task InsertAsync()
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;INSERT INTO `BlogPost` (`Title`, `Content`) VALUES (@title, @content);&amp;quot;;
            BindParams(cmd);
            await cmd.ExecuteNonQueryAsync();
            Id = (int) cmd.LastInsertedId;
        }

        public async Task UpdateAsync()
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;UPDATE `BlogPost` SET `Title` = @title, `Content` = @content WHERE `Id` = @id;&amp;quot;;
            BindParams(cmd);
            BindId(cmd);
            await cmd.ExecuteNonQueryAsync();
        }

        public async Task DeleteAsync()
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;DELETE FROM `BlogPost` WHERE `Id` = @id;&amp;quot;;
            BindId(cmd);
            await cmd.ExecuteNonQueryAsync();
        }

        private void BindId(MySqlCommand cmd)
        {
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@id&amp;quot;,
                DbType = DbType.Int32,
                Value = Id,
            });
        }

        private void BindParams(MySqlCommand cmd)
        {
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@title&amp;quot;,
                DbType = DbType.String,
                Value = Title,
            });
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@content&amp;quot;,
                DbType = DbType.String,
                Value = Content,
            });
        }

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;BlogPostQuery.cs&lt;/code&gt; contains commands to query Blog Posts from the database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;

namespace MySqlConnector.Performance.Models
{
    public class BlogPostQuery
    {

        public readonly AppDb Db;
        public BlogPostQuery(AppDb db)
        {
            Db = db;
        }

        public async Task&amp;lt;BlogPost&amp;gt; FindOneAsync(int id)
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;SELECT `Id`, `Title`, `Content` FROM `BlogPost` WHERE `Id` = @id&amp;quot;;
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@id&amp;quot;,
                DbType = DbType.Int32,
                Value = id,
            });
            var result = await ReadAllAsync(await cmd.ExecuteReaderAsync());
            return result.Count &amp;gt; 0 ? result[0] : null;
        }

        public async Task&amp;lt;List&amp;lt;BlogPost&amp;gt;&amp;gt; LatestPostsAsync()
        {
            var cmd = Db.Connection.CreateCommand();
            cmd.CommandText = @&amp;quot;SELECT `Id`, `Title`, `Content` FROM `BlogPost` ORDER BY `Id` DESC LIMIT 10;&amp;quot;;
            return await ReadAllAsync(await cmd.ExecuteReaderAsync());
        }

        public async Task DeleteAllAsync()
        {
            var txn = await Db.Connection.BeginTransactionAsync();
            try
            {
                var cmd = Db.Connection.CreateCommand();
                cmd.CommandText = @&amp;quot;DELETE FROM `BlogPost`&amp;quot;;
                await cmd.ExecuteNonQueryAsync();
                await txn.CommitAsync();
            }
            catch
            {
                await txn.RollbackAsync();
                throw;
            }
        }

        private async Task&amp;lt;List&amp;lt;BlogPost&amp;gt;&amp;gt; ReadAllAsync(DbDataReader reader)
        {
            var posts = new List&amp;lt;BlogPost&amp;gt;();
            using (reader)
            {
                while (await reader.ReadAsync())
                {
                    var post = new BlogPost(Db)
                    {
                        Id = await reader.GetFieldValueAsync&amp;lt;int&amp;gt;(0),
                        Title = await reader.GetFieldValueAsync&amp;lt;string&amp;gt;(1),
                        Content = await reader.GetFieldValueAsync&amp;lt;string&amp;gt;(2)
                    };
                    posts.Add(post);
                }
            }
            return posts;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;AsyncController.cs&lt;/code&gt; expose Async API Endpoints for CRUD operations on Blog Posts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using MySqlConnector.Performance.Models;

namespace MySqlConnector.Performance.Controllers
{
    [Route(&amp;quot;api/[controller]&amp;quot;)]
    public class AsyncController : Controller
    {
        // GET api/async
        [HttpGet]
        public async Task&amp;lt;IActionResult&amp;gt; GetLatest()
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.LatestPostsAsync();
                return new OkObjectResult(result);
            }
        }

        // GET api/async/5
        [HttpGet(&amp;quot;{id}&amp;quot;)]
        public async Task&amp;lt;IActionResult&amp;gt; GetOne(int id)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.FindOneAsync(id);
                if (result == null)
                return new NotFoundResult();
                return new OkObjectResult(result);
            }
        }

        // POST api/async
        [HttpPost]
        public async Task&amp;lt;IActionResult&amp;gt; Post([FromBody]BlogPost body)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                body.Db = db;
                await body.InsertAsync();
                return new OkObjectResult(body);
            }
        }

        // PUT api/async/5
        [HttpPut(&amp;quot;{id}&amp;quot;)]
        public async Task&amp;lt;IActionResult&amp;gt; PutOne(int id, [FromBody]BlogPost body)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.FindOneAsync(id);
                if (result == null)
                    return new NotFoundResult();
                result.Title = body.Title;
                result.Content = body.Content;
                await result.UpdateAsync();
                return new OkObjectResult(result);
            }
        }

        // DELETE api/async/5
        [HttpDelete(&amp;quot;{id}&amp;quot;)]
        public async Task&amp;lt;IActionResult&amp;gt; DeleteOne(int id)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.FindOneAsync(id);
                if (result == null)
                    return new NotFoundResult();
                await result.DeleteAsync();
                return new OkResult();
            }
        }

        // DELETE api/async
        [HttpDelete]
        public async Task&amp;lt;IActionResult&amp;gt; DeleteAll()
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                await query.DeleteAllAsync();
                return new OkResult();
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-the-app&#34;&gt;Run the App&lt;/h3&gt;

&lt;p&gt;Congratulations, you should have a fully functional app at this point!  You should be able to run &lt;code&gt;dotnet run&lt;/code&gt; to start your application.&lt;/p&gt;

&lt;p&gt;The following API Endpoints should work.  Note to set &lt;code&gt;Content-Type: application/json&lt;/code&gt; headers on &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;POST http://localhost:5000/api/async
{ &amp;quot;Title&amp;quot;: &amp;quot;One&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;First Blog Post!&amp;quot; }

POST http://localhost:5000/api/async
{ &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post!&amp;quot; }

POST http://localhost:5000/api/async
{ &amp;quot;Title&amp;quot;: &amp;quot;Three&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Third Blog Post!&amp;quot; }

GET http://localhost:5000/api/async
// Output:
[
    { &amp;quot;Id&amp;quot;: 3, &amp;quot;Title&amp;quot;: &amp;quot;Three&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Third Blog Post!&amp;quot; },
    { &amp;quot;Id&amp;quot;: 2, &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post!&amp;quot; },
    { &amp;quot;Id&amp;quot;: 1, &amp;quot;Title&amp;quot;: &amp;quot;One&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;First Blog Post!&amp;quot;}
]

DELETE http://localhost:5000/api/async/1
// blog post 1 is gone

PUT http://localhost:5000/api/async/2
{ &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post Revised&amp;quot; }

GET http://localhost:5000/api/async
// Output:
[
    { &amp;quot;Id&amp;quot;: 3, &amp;quot;Title&amp;quot;: &amp;quot;Three&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Third Blog Post!&amp;quot; },
    { &amp;quot;Id&amp;quot;: 2, &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post Revised&amp;quot; },
]

DELETE http://localhost:5000/api/async
// all blog posts are gone

GET http://localhost:5000/api/async
// Output:
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you would like to see all of this code and more on GitHub, check out &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/tree/master/tests/MySqlConnector.Performance&#34;&gt;MySqlConnector.Performance&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/configuration/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/configuration/</guid>
      <description>

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;MySqlConnector uses a connection string in order to connect to your database.&lt;/p&gt;

&lt;p&gt;To connect to a database on &lt;code&gt;localhost&lt;/code&gt; port &lt;code&gt;3306&lt;/code&gt; with a user &lt;code&gt;mysqltest&lt;/code&gt;, password &lt;code&gt;Password123&lt;/code&gt;, and default schema &lt;code&gt;mysqldb&lt;/code&gt;, the connection string would be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host=127.0.0.1;port=3306;user id=mysqltest;password=Password123;database=mysqldb;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For all connection string options, view the &lt;a href=&#34;connection-options/&#34;&gt;Connection Options Reference&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;application-database-object-example&#34;&gt;Application Database Object Example&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to use an IDisposable object that configures the connection string globally, and closes the connection automatically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class AppDb : IDisposable
{
    public readonly MySqlConnection Connection;

    public AppDb()
    {
        Connection = new MySqlConnection(&amp;quot;host=127.0.0.1;port=3306;user id=mysqltest;password=Password123;database=mysqldb;&amp;quot;);
    }

    public void Dispose()
    {
        Connection.Close();
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Callers can use the Application Database Object object like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public async Task AsyncMethod()
{
    using (var db = new AppDb())
    {
        await db.Connection.OpenAsync();
        // db.Connection is open and ready to use
    }
    // db.Connection was closed by AppDb.Dispose
}

public void SyncMethod()
{
    using (var db = new AppDb())
    {
        db.Connection.Open();
        // db.Connection is open and ready to use
    }
    // db.Connection was closed by AppDb.Dispose
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MySqlTransaction</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-transaction/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-transaction/</guid>
      <description>

&lt;h1 id=&#34;mysqltransaction&#34;&gt;MySqlTransaction&lt;/h1&gt;

&lt;p&gt;MySqlTransaction implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbtransaction&#34;&gt;ADO.NET DbTransaction class&lt;/a&gt;,
please refer to its documentation.&lt;/p&gt;

&lt;p&gt;Additionally, MySqlTransaction provides the following public properties and methods that may be used:&lt;/p&gt;

&lt;h3 id=&#34;additional-instance-methods&#34;&gt;Additional Instance Methods&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public Task CommitAsync(CancellationToken cancellationToken = default(CancellationToken))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of Commit&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public Task RollbackAsync(CancellationToken cancellationToken = default(CancellationToken))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of Rollback&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Use with ORMs</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/use-with-orms/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/use-with-orms/</guid>
      <description>

&lt;h1 id=&#34;use-with-orms&#34;&gt;Use with ORMs&lt;/h1&gt;

&lt;p&gt;This library is compatible with popular .NET ORMs including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/StackExchange/dapper-dot-net&#34;&gt;Dapper&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/Dapper&#34;&gt;NuGet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nreco/data&#34;&gt;NReco.Data&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/NReco.Data&#34;&gt;NuGet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ServiceStack/ServiceStack.OrmLite&#34;&gt;ServiceStack.OrmLite&lt;/a&gt; (&lt;a href=&#34;https://www.myget.org/feed/servicestack/package/nuget/ServiceStack.OrmLite.MySqlConnector&#34;&gt;MyGet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SimpleStack/simplestack.orm&#34;&gt;SimpleStack.Orm&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/SimpleStack.Orm.MySQLConnector&#34;&gt;NuGet&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Entity Framework support, use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql&#34;&gt;Pomelo.EntityFrameworkCore.MySql&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/Pomelo.EntityFrameworkCore.MySql&#34;&gt;NuGet&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>