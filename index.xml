<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySqlConnector: Async MySQL Driver for .NET and .NET Core</title>
    <link>https://mysql-net.github.io/MySqlConnector/index.xml</link>
    <description>Recent content on MySqlConnector: Async MySQL Driver for .NET and .NET Core</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 16 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mysql-net.github.io/MySqlConnector/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Best Practices</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/best-practices/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/best-practices/</guid>
      <description>

&lt;h1 id=&#34;best-practices&#34;&gt;Best Practices&lt;/h1&gt;

&lt;h2 id=&#34;asynchronous-operation&#34;&gt;Asynchronous Operation&lt;/h2&gt;

&lt;p&gt;MySqlConnector is fully asynchronous, supporting the async ADO.NET methods added in .NET 4.5 without blocking
or using &lt;code&gt;Task.Run&lt;/code&gt; to run synchronous methods on a background thread.  Programmers implementing MySqlConnector
should be familiar with &lt;a href=&#34;https://msdn.microsoft.com/en-us/magazine/jj991977.aspx&#34;&gt;Async/Await - Best Practices in Asynchronous Programming&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;always-use-async-when-possible&#34;&gt;Always Use Async when possible&lt;/h3&gt;

&lt;table class=&#34;table table-bordered table-head-centered&#34; style=&#34;max-width: 650px&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width:30%&#34;&gt;ADO.NET Class&lt;/th&gt;
    &lt;th class=&#34;success&#34; style=&#34;width:40%&#34;&gt;Asynchronous Method&lt;br /&gt;(always use when possible)&lt;/th&gt;
    &lt;th class=&#34;warning&#34; style=&#34;width:30%&#34;&gt;Synchronous Method&lt;br /&gt;(avoid when possible)&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbconnection&#34;&gt;DbConnection&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;OpenAsync&lt;/td&gt;
    &lt;td&gt;Open&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;&lt;a href=&#34;api/mysql-connection&#34;&gt;MySqlConnection&lt;/a&gt;.BeginTransactionAsync
    &lt;/td&gt;
    &lt;td&gt;BeginTransaction&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;3&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbcommand&#34;&gt;DbCommand&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;ExecuteNonQueryAsync&lt;/td&gt;
    &lt;td&gt;ExecuteNonQuery&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ExecuteReaderAsync&lt;/td&gt;
    &lt;td&gt;ExecuteReader&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ExecuteScalarAsync&lt;/td&gt;
    &lt;td&gt;ExecuteScalar&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;4&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbdatareader&#34;&gt;DbDataReader&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;GetFieldValueAsync&lt;/td&gt;
    &lt;td&gt;GetFieldValue&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;IsDBNullAsync&lt;/td&gt;
    &lt;td&gt;IsDBNull&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;NextResultAsync&lt;/td&gt;
    &lt;td&gt;NextResult&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ReadAsync&lt;/td&gt;
    &lt;td&gt;Read&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;
      &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbtransaction&#34;&gt;DbTransaction&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;&lt;a href=&#34;api/mysql-transaction&#34;&gt;MySqlTransaction&lt;/a&gt;.CommitAsync
    &lt;/td&gt;
    &lt;td&gt;Commit&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;&lt;a href=&#34;api/mysql-transaction&#34;&gt;MySqlTransaction&lt;/a&gt;.RollbackAsync
    &lt;/td&gt;
    &lt;td&gt;Rollback&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;span class=&#34;text-danger&#34;&gt;*&lt;/span&gt;Async Transaction methods are not part of ADO.NET, they are provided by
MySqlConnector to allow database code to remain fully asynchronous.&lt;/p&gt;

&lt;h3 id=&#34;example-console-application&#34;&gt;Example Console Application&lt;/h3&gt;

&lt;p&gt;In order to get the full benefit of asynchronous operation, every method in the call stack that eventually calls
MySqlConnector should be implemented as an async method.  The exception is the &lt;code&gt;static void Main&lt;/code&gt; method in a Console Application.&lt;/p&gt;

&lt;p&gt;Example assumes a &lt;a href=&#34;overview/configuration&#34;&gt;configured AppDb&lt;/a&gt; object in the &lt;code&gt;MySqlConnector.Examples&lt;/code&gt; namespace.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Threading.Tasks;
using System.Collections.Generic;

namespace MySqlConnector.Examples
{
    public class Program
    {
        public static void Main(string[] args)
        {
            MainAsync(args).GetAwaiter().GetResult();
        }

        public static async Task MainAsync(string[] args)
        {
            var tasks = new List&amp;lt;Task&amp;gt;();
            for (var i=0; i&amp;lt;100; i++){
                tasks.Add(Controllers.SleepOne());
            }
            // these 100 queries should all complete in around
            // 1 second if &amp;quot;Max Pool Size=100&amp;quot; (the default)
            await Task.WhenAll(tasks);
        }
    }

    public class Controllers
    {
        public static async Task SleepOne()
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                using (var cmd = db.Connection.CreateCommand())
                {
                    cmd.CommandText = @&amp;quot;SELECT SLEEP(1)&amp;quot;;
                    await cmd.ExecuteNonQueryAsync();
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;synchronous-operation&#34;&gt;Synchronous Operation&lt;/h2&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  Using Synchronous Methods can have adverse effects on the managed thread pool and cause slowdowns or lock-ups
  if not properly tuned.  The recommended approach is to use all Asynchronous Methods.
&lt;/div&gt;

&lt;p&gt;If you must use synchronous methods, ensure that your thread pool is at least the size of the number of
concurrent connections you plan to support.  For example, if you are creating a web server using
synchronous methods that needs to support serving 500 Requests Per Second, set the minimum thread
pool size to 500.&lt;/p&gt;

&lt;p&gt;Example &lt;code&gt;project.json&lt;/code&gt; configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;runtimeOptions&amp;quot;: {
    &amp;quot;configProperties&amp;quot;: {
      &amp;quot;System.GC.Server&amp;quot;: true,
      &amp;quot;System.GC.Concurrent&amp;quot;: true,
      &amp;quot;System.Threading.ThreadPool.MinThreads&amp;quot;: 500
    }
  },
  // other config
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Home</title>
      <link>https://mysql-net.github.io/MySqlConnector/home/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/home/</guid>
      <description>

&lt;h1 id=&#34;home&#34;&gt;Home&lt;/h1&gt;

&lt;p&gt;MySqlConnector is an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/e80y5yhx.aspx&#34;&gt;ADO.NET&lt;/a&gt; data
provider for &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;. It provides implementations of
&lt;code&gt;DbConnection&lt;/code&gt;, &lt;code&gt;DbCommand&lt;/code&gt;, &lt;code&gt;DbDataReader&lt;/code&gt;, &lt;code&gt;DbTransaction&lt;/code&gt; &amp;ndash; the classes
needed to query and update databases from managed code.  Its features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET Core Compatibility&lt;/li&gt;
&lt;li&gt;Truly Asynchronous: async functions implement asynchronous I/O&lt;/li&gt;
&lt;li&gt;High Performance: code is stress tested for performance bottlenecks&lt;/li&gt;
&lt;li&gt;Lightweight: Library only implements ADO.NET core&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;why-use-mysql-over-oracle-s-connector-net&#34;&gt;Why use MySql over Oracle&amp;rsquo;s Connector/NET?&lt;/h3&gt;

&lt;p&gt;MySqlConnector is a clean-room reimplementation of the &lt;a href=&#34;https://dev.mysql.com/doc/internals/en/client-server-protocol.html&#34;&gt;MySQL Protocol&lt;/a&gt;
and is not based on &lt;a href=&#34;https://github.com/mysql/mysql-connector-net&#34;&gt;Oracle&amp;rsquo;s Connector/NET&lt;/a&gt;.&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;max-width: 650px&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width:25%&#34;&gt;&lt;/th&gt;
    &lt;th style=&#34;width:25%&#34;&gt;MySqlConnector&lt;/th&gt;
    &lt;th style=&#34;width:25%&#34;&gt;Oracle&#39;s Connector/NET&lt;/th&gt;
    &lt;th style=&#34;width:25%&#34;&gt;MySqlConnector Advantage&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;strong&gt;Async&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;Fully asynchronous&lt;/strong&gt; I/O&lt;/td&gt;
    &lt;td&gt;Async calls map to synchronous I/O&lt;/td&gt;
    &lt;td&gt;Uses fewer thread pool threads&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;strong&gt;Development&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;
      &lt;strong&gt;Open and Collaborative&lt;/strong&gt; Development on
      &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector&#34;&gt;GitHub&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      Closed Development Roadmap.  Code is viewable on
      &lt;a href=&#34;https://github.com/mysql/mysql-connector-net&#34;&gt;GitHub&lt;/a&gt;,
      some issues addressed in &lt;a href=&#34;http://forums.mysql.com/list.php?38&#34;&gt;Forums&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      Get involved!  View
      &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/projects/1&#34;&gt;our roadmap&lt;/a&gt;,
      discuss &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues&#34;&gt;issues&lt;/a&gt;,
      contribute &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pulls&#34;&gt;pull requests&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;
      The &lt;strong&gt;&lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/blob/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;a href=&#34;http://www.gnu.org/licenses/old-licenses/gpl-2.0.html&#34;&gt;GPLv2&lt;/a&gt;
      with &lt;a href=&#34;http://www.mysql.com/about/legal/licensing/foss-exception/&#34;&gt;FOSS Exception&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;More Permissive&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Installing</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/installing/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/installing/</guid>
      <description>

&lt;h1 id=&#34;installing&#34;&gt;Installing&lt;/h1&gt;

&lt;p&gt;The recommended way of installing MySqlConnector is through &lt;a href=&#34;https://www.nuget.org/packages/MySqlConnector/&#34;&gt;NuGet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Add MySqlConnector to the dependencies in your &lt;code&gt;project.json&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;title&amp;quot;: &amp;quot;My Application&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;A great application&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;MySqlConnector&amp;quot;: &amp;quot;0.*&amp;quot;,
    // other dependencies
  },
  // other config
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Run the command &lt;code&gt;dotnet restore&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySqlConnection</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-connection/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-connection/</guid>
      <description>

&lt;h1 id=&#34;mysqlconnection&#34;&gt;MySqlConnection&lt;/h1&gt;

&lt;p&gt;MySqlConnection implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbconnection&#34;&gt;ADO.NET DbConnection class&lt;/a&gt;,
please refer to its documentation.&lt;/p&gt;

&lt;p&gt;Additionally, MySqlConnection provides the following public properties and methods that may be used:&lt;/p&gt;

&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public MySqlConnection()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Parameterless constructor&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public MySqlConnection(string connectionString)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Constructor that set the connection string&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;additional-properties&#34;&gt;Additional Properties&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public int ServerThread&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Connection ID from MySQL Server&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;additional-instance-methods&#34;&gt;Additional Instance Methods&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public Task&amp;lt;MySqlTransaction&amp;gt; BeginTransactionAsync(CancellationToken cancellationToken = default(CancellationToken))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of BeginTransaction&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public Task&amp;lt;MySqlTransaction&amp;gt; BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken = default(CancellationToken))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of BeginTransaction that supports setting Isolation Level&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;additional-static-methods&#34;&gt;Additional Static Methods&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public static void ClearPool(MySqlConnection connection)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Clears the connection pool that the connection belongs to&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public static Task ClearPoolAsync(MySqlConnection connection)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of ClearPool&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public static Task ClearPoolAsync(MySqlConnection connection, CancellationToken cancellationToken)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of ClearPool with cancellation token support&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public static void ClearAllPools()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Clears all connection pools in the entire application&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public static Task ClearAllPoolsAsync()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of ClearAllPoolsAsync&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public static Task ClearAllPoolsAsync(CancellationToken cancellationToken)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of ClearAllPoolsAsync with cancellation token support&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Known Issues</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/known-issues/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/known-issues/</guid>
      <description>

&lt;h1 id=&#34;known-issues&#34;&gt;Known Issues&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Not all MySQL data types are supported.&lt;/li&gt;
&lt;li&gt;Many &lt;code&gt;MySql.Data&lt;/code&gt; connection string settings are not supported by this library. See &lt;a href=&#34;connection-options/&#34;&gt;Connection Options&lt;/a&gt; for a list of supported options.&lt;/li&gt;
&lt;li&gt;Only the &lt;code&gt;mysql_native_password&lt;/code&gt; and &lt;code&gt;mysql_old_password&lt;/code&gt; authentication plugins are supported.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Migrating from Connector/NET</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/migrating-from-connector-net/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/migrating-from-connector-net/</guid>
      <description>

&lt;h1 id=&#34;migrating-from-connector-net&#34;&gt;Migrating from Connector/NET&lt;/h1&gt;

&lt;h3 id=&#34;connection-string-differences&#34;&gt;Connection String Differences&lt;/h3&gt;

&lt;p&gt;MySqlConnector has some different default connection string options:&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width:20%&#34;&gt;Option&lt;/th&gt;
    &lt;th style=&#34;width:20%&#34;&gt;MySqlConnector&lt;/th&gt;
    &lt;th style=&#34;width:20%&#34;&gt;Oracle&#39;s Connector/NET&lt;/th&gt;
    &lt;th style=&#34;width:40%&#34;&gt;Notes&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;ConnectionReset&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;MySqlConnector takes an extra command to reset pooled connections by default so that the connection is always in a known state&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;UseAffectedRows&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Default is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;This also affects the behavior of the &lt;code&gt;ROW_COUNT&lt;/code&gt; function.  &lt;code&gt;UseAffectedRows=true&lt;/code&gt; is the default in most other languages (C++, PHP, others)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Some command line options that are supported in Connector/NET are not supported in MySqlConnector.  For a full list of options that are
supported in MySqlConnector, see the &lt;a href=&#34;connection-options&#34;&gt;Connection Options&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;bugs-present-in-connector-net-that-are-fixed-in-mysqlconnector&#34;&gt;Bugs present in Connector/NET that are fixed in MySqlConnector&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=66476&#34;&gt;#66476&lt;/a&gt;: Connection pool uses queue instead of stack&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=70111&#34;&gt;#70111&lt;/a&gt;: &lt;code&gt;Async&lt;/code&gt; methods execute synchronously&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=70686&#34;&gt;#70686&lt;/a&gt;: &lt;code&gt;TIME(3)&lt;/code&gt; and &lt;code&gt;TIME(6)&lt;/code&gt; fields serialize milliseconds incorrectly&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=73610&#34;&gt;#73610&lt;/a&gt;: Invalid password exception has wrong number&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=73788&#34;&gt;#73788&lt;/a&gt;: Can&amp;rsquo;t use &lt;code&gt;DateTimeOffset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=77421&#34;&gt;#77421&lt;/a&gt;: Connection is not reset when pulled from the connection pool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78426&#34;&gt;#78426&lt;/a&gt;: Unknown database exception has wrong number&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78760&#34;&gt;#78760&lt;/a&gt;: Error when using tabs and newlines in SQL statements&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=78917&#34;&gt;#78917&lt;/a&gt;: &lt;code&gt;TINYINT(1)&lt;/code&gt; values start being returned as &lt;code&gt;sbyte&lt;/code&gt; after &lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=81650&#34;&gt;#81650&lt;/a&gt;: &lt;code&gt;Server&lt;/code&gt; connection string option may now contain multiple, comma separated hosts that will be tried in order until a connection succeeds&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=84220&#34;&gt;#84220&lt;/a&gt;: Cannot call a stored procedure with &lt;code&gt;.&lt;/code&gt; in its name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.mysql.com/bug.php?id=85185&#34;&gt;#85185&lt;/a&gt;: &lt;code&gt;ConnectionReset=True&lt;/code&gt; does not preserve connection charset&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MySqlCommand</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-command/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-command/</guid>
      <description>

&lt;h1 id=&#34;mysqlcommand&#34;&gt;MySqlCommand&lt;/h1&gt;

&lt;p&gt;MySqlCommand implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbcommand&#34;&gt;ADO.NET DbCommand class&lt;/a&gt;,
please refer to its documentation.&lt;/p&gt;

&lt;p&gt;Additionally, MySqlCommand provides the following public properties and methods that may be used:&lt;/p&gt;

&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public MySqlCommand()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Parameterless constructor&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public MySqlCommand(string commandText)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;constructor accepting command SQL&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public MySqlCommand(MySqlConnection connection, MySqlTransaction transaction)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;constructor accepting connection object and transaction object&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public MySqlCommand(string commandText, MySqlConnection connection)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;constructor accepting command SQL and connection object&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public MySqlCommand(string commandText, MySqlConnection connection, MySqlTransaction transaction)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;constructor accepting command SQL, connection object, and transaction object&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;additional-properties&#34;&gt;Additional Properties&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public long LastInsertedId&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Holds the value of the LastInsertedId after an SQL command inserting a row has been executed&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Version History</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/version-history/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/version-history/</guid>
      <description>

&lt;h1 id=&#34;version-history&#34;&gt;Version History&lt;/h1&gt;

&lt;h3 id=&#34;0-17-0&#34;&gt;0.17.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement cancellation of the active reader: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/3&#34;&gt;#3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;MySqlErrorCode&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/232&#34;&gt;#232&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Implement a connection pool reaper to close idle connections: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/217&#34;&gt;#217&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;ConnectionIdleTimeout&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/218&#34;&gt;#218&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Implement &lt;code&gt;ConnectionLifeTime&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/212&#34;&gt;#212&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-16-2&#34;&gt;0.16.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix exceptions when server resets the connection: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/221&#34;&gt;#221&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-16-1&#34;&gt;0.16.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Throw a better exception when &lt;code&gt;max_allowed_packet&lt;/code&gt; is exceeded: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/40&#34;&gt;#40&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-16-0&#34;&gt;0.16.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;MySqlParameterCollection.AddWithValue&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/127&#34;&gt;#127&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/michi84o&#34;&gt;michi84o&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-15-2&#34;&gt;0.15.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Include help on &lt;code&gt;AllowUserVariables&lt;/code&gt; in exception message: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/206&#34;&gt;#206&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-15-1&#34;&gt;0.15.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;NullReferenceException&lt;/code&gt; in &lt;code&gt;MySqlConnection.Database&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/205&#34;&gt;#205&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-15-0&#34;&gt;0.15.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;MySqlConnection.ChangeDatabase&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/201&#34;&gt;#201&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Buffer Result Sets&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/202&#34;&gt;#202&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-14-1&#34;&gt;0.14.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix exception when &lt;code&gt;MySqlDataReader&lt;/code&gt; isn&amp;rsquo;t disposed: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/196&#34;&gt;#196&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-14-0&#34;&gt;0.14.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;System.*&lt;/code&gt; package references: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/190&#34;&gt;#190&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-13-0&#34;&gt;0.13.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;MySqlBulkLoader&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/15&#34;&gt;#15&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/michi84o&#34;&gt;gitsno&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-12-0&#34;&gt;0.12.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add support for &lt;code&gt;DateTimeOffset&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/172&#34;&gt;#172&lt;/a&gt;, &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/175&#34;&gt;#175&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/sebastienros&#34;&gt;Sébastien Ros&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-6&#34;&gt;0.11.6&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;PlatformNotSupportedException&lt;/code&gt; on AWS Lambda: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/170&#34;&gt;#170&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/SebastianC&#34;&gt;Sebastian&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-5&#34;&gt;0.11.5&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Further improve async and sync performance: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/164&#34;&gt;#164&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-4&#34;&gt;0.11.4&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No changes in this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-3&#34;&gt;0.11.3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Improve async performance: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/164&#34;&gt;#164&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-2&#34;&gt;0.11.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix InvalidCastException when using aggregate functions: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/54&#34;&gt;#54&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-1&#34;&gt;0.11.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Handle &lt;code&gt;IOException&lt;/code&gt; in &lt;code&gt;MySqlSession.DisposeAsync&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/159&#34;&gt;#159&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-11-0&#34;&gt;0.11.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement the &lt;code&gt;SslMode=Preferred&lt;/code&gt; connection string option and make it the default: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/158&#34;&gt;#158&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-10-0&#34;&gt;0.10.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Change minimum supported .NET Framework version to .NET 4.5.1: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/154&#34;&gt;#154&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-9-2&#34;&gt;0.9.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix MySqlConnection.DataSource with Unix Domain Socket: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/152&#34;&gt;#152&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-9-1&#34;&gt;0.9.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;SocketException&lt;/code&gt; when calling &lt;code&gt;OpenAsync&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/150&#34;&gt;#150&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-9-0&#34;&gt;0.9.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;Treat Tiny As Boolean&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/141&#34;&gt;#141&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-8-0&#34;&gt;0.8.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;Keep Alive&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/132&#34;&gt;#132&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-7-4&#34;&gt;0.7.4&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;Packet received out-of-order&lt;/code&gt; exception with &lt;code&gt;UseCompression=true&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/146&#34;&gt;#146&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-7-3&#34;&gt;0.7.3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;GetDataTypeName&lt;/code&gt; for &lt;code&gt;ENUM&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; columns: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/52&#34;&gt;#52&lt;/a&gt;, &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/71&#34;&gt;#71&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-7-2&#34;&gt;0.7.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix authentication for MySQL Server 5.1: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/139&#34;&gt;#139&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-7-1&#34;&gt;0.7.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;NextResult&lt;/code&gt; incorrectly returning &lt;code&gt;true&lt;/code&gt;, which may cause problems with Dapper&amp;rsquo;s &lt;code&gt;QueryMultiple&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/135&#34;&gt;#135&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Reduce memory usage related to &lt;code&gt;Enum.HasFlag&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/137&#34;&gt;#137&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-7-0&#34;&gt;0.7.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement stored procedure support: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/19&#34;&gt;#19&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;Known issue: &lt;code&gt;NextResult&lt;/code&gt; incorrectly returns &lt;code&gt;true&lt;/code&gt;, which may cause problems with Dapper&amp;rsquo;s &lt;code&gt;QueryMultiple&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/135&#34;&gt;#135&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-6-2&#34;&gt;0.6.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;NullReferenceException&lt;/code&gt; when &lt;code&gt;MySqlParameter.Value == null&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/126&#34;&gt;#126&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-6-1&#34;&gt;0.6.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;AggregateException&lt;/code&gt; going unhandled in &lt;code&gt;OpenAsync&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/124&#34;&gt;#124&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fix SSL over Unix domain sockets.&lt;/li&gt;
&lt;li&gt;Reduce allocations when using SSL certificates.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-6-0&#34;&gt;0.6.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;UseCompression&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/31&#34;&gt;#31&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add support for Unix domain sockets: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/118&#34;&gt;#118&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-5-0&#34;&gt;0.5.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;UseAffectedRows&lt;/code&gt; connection string option. (Note that the default value is &lt;code&gt;true&lt;/code&gt;, unlike &lt;code&gt;MySql.Data&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-4-0&#34;&gt;0.4.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Rename &lt;code&gt;SslMode&lt;/code&gt; enum to &lt;code&gt;MySqlSslMode&lt;/code&gt; (for compatibility with &lt;code&gt;MySql.Data&lt;/code&gt;):&lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/93&#34;&gt;#102&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-3-0&#34;&gt;0.3.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add SSL support and &lt;code&gt;SslMode&lt;/code&gt; connection string option: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/88&#34;&gt;#88&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rewrite protocol serialization layer to support SSL and make adding compression easier: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/pull/93&#34;&gt;#93&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-2-1&#34;&gt;0.2.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add more diagnostics for unsupported auth plugins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-2-0&#34;&gt;0.2.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;MySqlConnectionStringBuilder.ForceSynchronous&lt;/code&gt;: &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/issues/91&#34;&gt;#91&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/ejball&#34;&gt;Ed Ball&lt;/a&gt; for contributions to this release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-1-0&#34;&gt;0.1.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First non-alpha release. Supports core data access scenarios with common ORMs.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Connection Options</title>
      <link>https://mysql-net.github.io/MySqlConnector/connection-options/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/connection-options/</guid>
      <description>

&lt;h1 id=&#34;connection-options&#34;&gt;Connection Options&lt;/h1&gt;

&lt;p&gt;MySqlConnector supports a subset of Oracle&amp;rsquo;s &lt;a href=&#34;https://dev.mysql.com/doc/connector-net/en/connector-net-connection-options.html&#34;&gt;Connector/NET connection options&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;base-options&#34;&gt;Base Options&lt;/h2&gt;

&lt;p&gt;These are the basic options that need to be defined to connect to a MySQL database.&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Name&lt;/th&gt;
    &lt;th style=&#34;width: 10%&#34;&gt;Default&lt;/th&gt;
    &lt;th style=&#34;width: 70%&#34;&gt;Descriotion&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;Host, Server, Data Source, DataSource, Address, Addr, Network Address&lt;/td&gt;
    &lt;td&gt;localhost&lt;/td&gt;
    &lt;td&gt;The name or network address of the instance of MySQL to which to connect. Multiple hosts can be specified separated by commas. This can be useful where multiple MySQL servers are configured for replication and you are not concerned about the precise server you are connecting to. No attempt is made by the provider to synchronize writes to the database, so take care when using this option. In Unix environment with Mono, this can be a fully qualified path to a MySQL socket file. With this configuration, the Unix socket is used instead of the TCP/IP socket. Currently, only a single socket name can be given, so accessing MySQL in a replicated environment using Unix sockets is not currently supported.&lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;Port&lt;/td&gt;
    &lt;td&gt;3306&lt;/td&gt;
    &lt;td&gt;The port MySQL is using to listen for connections.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;User Id, UserID, Username, Uid, User name, User&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;The MySQL login account being used.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Password, pwd&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;The password for the MySQL account being used.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Database, Initial Catalog&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;The case-sensitive name of the database to use initially.  This is not required.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;ssl-tls-options&#34;&gt;SSL/TLS Options&lt;/h2&gt;

&lt;p&gt;These are the options that need to be used in order to configure a connection to use SSL/TLS.&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Name&lt;/th&gt;
    &lt;th style=&#34;width: 10%&#34;&gt;Default&lt;/th&gt;
    &lt;th style=&#34;width: 70%&#34;&gt;Descriotion&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;SSL Mode, SslMode&lt;/td&gt;
    &lt;td&gt;None&lt;/td&gt;
    &lt;td&gt;This option has the following values:
      &lt;ul&gt;
        &lt;li&gt;&lt;b&gt;Preferred&lt;/b&gt; - this is the default. Use SSL if the server supports it.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;None&lt;/b&gt; - do not use SSL.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;Required&lt;/b&gt; - Always use SSL. Deny connection if server does not support SSL.  Do not validate CA or hostname.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;VerifyCA&lt;/b&gt; - Always use SSL. Validate the CA but tolerate hostname mismatch.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;VerifyFull&lt;/b&gt; - Always use SSL. Validate CA and hostname.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Certificate File, CertificateFile&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;This option specifies the path to a certificate file in PKCS #12 format (.pfx). &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Certificate Password, CertificatePassword   &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Specifies a password that is used in conjunction with a certificate specified using the option CertificateFile.  Not required if the certificate file is not password protected.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;connection-pooling-options&#34;&gt;Connection Pooling Options&lt;/h2&gt;

&lt;p&gt;Connection pooling is enabled by default.  These options are used to configure it.&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Name&lt;/th&gt;
    &lt;th style=&#34;width: 10%&#34;&gt;Default&lt;/th&gt;
    &lt;th style=&#34;width: 70%&#34;&gt;Descriotion&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;Pooling&lt;/td&gt;
    &lt;td&gt;true&lt;/td&gt;
    &lt;td&gt;When true, the MySqlConnection object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool. Recognized values are true, false, yes, and no.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Connection Lifetime, ConnectionLifeTime&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;When a connection is returned to the pool, its creation time is compared with the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified by Connection Lifetime. This is useful in clustered configurations to force load balancing between a running server and a server just brought online. A value of zero (0) means pooled connections will never incur a ConnectionLifeTime timeout.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Connection Reset, ConnectionReset   &lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;If true, the connection state is reset when it is retrieved from the pool. The default value of false avoids making an additional server round trip when obtaining a connection, but the connection state is not reset.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Connection Idle Timeout, ConnectionIdleTimeout&lt;/td&gt;
    &lt;td&gt;180&lt;/td&gt;
    &lt;td&gt;The amount of time in seconds that a connection can remain idle in the pool. Any connection that is idle for longer is subject to being closed by a background task that runs every minute, unless there are only MinimumPoolSize connections left in the pool. A value of zero (0) means pooled connections will never incur a ConnectionIdleTimeout.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Maximum Pool Size, Max Pool Size, MaximumPoolsize, maxpoolsize&lt;/td&gt;
    &lt;td&gt;100&lt;/td&gt;
    &lt;td&gt;The maximum number of connections allowed in the pool.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Minimum Pool Size, Min Pool Size, MinimumPoolSize, minpoolsize&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;The minimum number of connections to leave in the pool if ConnectionIdleTimeout is reached.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;other-options&#34;&gt;Other Options&lt;/h2&gt;

&lt;p&gt;These are the other options that MySqlConnector supports.  They are set to sensible defaults and typically do not need to be tweaked.&lt;/p&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
  &lt;thead&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Name&lt;/th&gt;
    &lt;th style=&#34;width: 10%&#34;&gt;Default&lt;/th&gt;
    &lt;th style=&#34;width: 70%&#34;&gt;Descriotion&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;AllowUserVariables, Allow User Variables&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;Setting this to true indicates that the provider expects user variables in the SQL.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;BufferResultSets, Buffer Result Sets&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;Setting this to true immediately buffers all result sets to memory upon calling ExecuteReader/ExecuteReaderAsync.  This will allow the connection
      to execute another statement while still holding the original postion of the reader.  Do not use when result sets are bigger than available memory.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Compress, Use Compression, UseCompression&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;If true (and if the server supports compression), compresses packets sent between client and server. This option is unlikely to be useful in
      practice unless there is a high-latency or low-bandwidth network link between the application and the database server. You should measure
      performance with and without this option to determine if it&#39;s beneficial in your environment.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Connect Timeout, Connection Timeout, ConnectionTimeout&lt;/td&gt;
    &lt;td&gt;15&lt;/td&gt;
    &lt;td&gt;The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert Zero Datetime, ConvertZeroDateTime&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;True to have MySqlDataReader.GetValue() and MySqlDataReader.GetDateTime() return DateTime.MinValue for date or datetime columns that have disallowed values.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Keep Alive, Keepalive&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;TCP Keepalive idle time.  A value of 0 indicates that the OS Default keepalive settings are used.
    On Windows, a value greater than 0 is the idle connection time, measured in seconds, before the first keepalive packet is sent.
    Due to limitations in .NET Core, Unix-based Operating Systems will always use the OS Default keepalive settings.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Old Guids, OldGuids&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt; The backend representation of a GUID type was changed from BINARY(16) to CHAR(36). This was done to allow developers to use the server function UUID() to populate a GUID table - UUID() generates a 36-character string. Developers of older applications can add &#39;Old Guids=true&#39; to the connection string to use a GUID of data type BINARY(16).&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Persist Security Info, PersistSecurityInfo&lt;/td&gt;
    &lt;td&gt;false&lt;/td&gt;
    &lt;td&gt;When set to false or no (strongly recommended), security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Resetting the connection string resets all connection string values, including the password. Recognized values are true, false, yes, and no.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Treat Tiny As Boolean, TreatTinyAsBoolean&lt;/td&gt;
    &lt;td&gt;true&lt;/td&gt;
    &lt;td&gt;When set to true, tinyint(1) values are returned as booleans.  Setting this to false causes tinyint(1) to be returned as sbyte/byte.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Use Affected Rows, UseAffectedRows&lt;/td&gt;
    &lt;td&gt;true&lt;/td&gt;
    &lt;td&gt;When false, the connection reports found rows instead of changed (affected) rows.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>MySqlDataReader</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-data-reader/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-data-reader/</guid>
      <description>

&lt;h1 id=&#34;mysqldatareader&#34;&gt;MySqlDataReader&lt;/h1&gt;

&lt;p&gt;MySqlDataReader implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbdatareader&#34;&gt;ADO.NET DbDataReader class&lt;/a&gt;,
please refer to its documentation.&lt;/p&gt;

&lt;p&gt;Additionally, MySqlDataReader provides the following public properties and methods that may be used:&lt;/p&gt;

&lt;h3 id=&#34;additional-instance-methods&#34;&gt;Additional Instance Methods&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public sbyte GetSByte(int ordinal)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Gets the value of the specified column as an sbyte&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public DateTimeOffset GetDateTimeOffset(int ordinal)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Gets the value of the specified column as a DateTimeOffset with an offset of 0&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Use with .NET Core MVC</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/net-core-mvc/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/net-core-mvc/</guid>
      <description>

&lt;h1 id=&#34;use-with-net-core-mvc&#34;&gt;Use with .NET Core MVC&lt;/h1&gt;

&lt;p&gt;This tutorial will walk through a basic .NET Core JSON API application that performs CRUD operations on
blog posts.  The code in this tutorial comes is an adaptation of &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/tree/master/tests/MySqlConnector.Performance&#34;&gt;MySqlConnector.Performance&lt;/a&gt;,
the performance application that is used to stress test MySqlConnector.&lt;/p&gt;

&lt;h3 id=&#34;initialize-mysql&#34;&gt;Initialize MySQL&lt;/h3&gt;

&lt;p&gt;Create a MySQL database and copy the following SQL to create a table called &lt;code&gt;BlogPost&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;CREATE TABLE IF NOT EXISTS `BlogPost` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Content` longtext,
  `Title` longtext,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;initialize-net-core-mvc&#34;&gt;Initialize .NET Core MVC&lt;/h3&gt;

&lt;p&gt;Create a new directory for the project with a &lt;code&gt;project.json&lt;/code&gt; file at the root:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;Microsoft.AspNetCore.Mvc&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Server.Kestrel&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.EnvironmentVariables&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.FileExtensions&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.Json&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.CommandLine&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging.Console&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging.Debug&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Options.ConfigurationExtensions&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;MySqlConnector&amp;quot;: &amp;quot;0.*&amp;quot;
  },

  &amp;quot;frameworks&amp;quot;: {
    &amp;quot;netcoreapp1.0&amp;quot;: {
      &amp;quot;dependencies&amp;quot;: {
        &amp;quot;Microsoft.NETCore.App&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;platform&amp;quot;,
          &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;
        }
      }
    }
  },

  &amp;quot;runtimeOptions&amp;quot;: {
    &amp;quot;gcServer&amp;quot;: true
  },

  &amp;quot;buildOptions&amp;quot;: {
    &amp;quot;emitEntryPoint&amp;quot;: true,
    &amp;quot;preserveCompilationContext&amp;quot;: true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the command &lt;code&gt;dotnet restore&lt;/code&gt; in this directory.&lt;/p&gt;

&lt;h3 id=&#34;add-configuration-files&#34;&gt;Add Configuration Files&lt;/h3&gt;

&lt;p&gt;The first building block of our appplication is definig a couple JSON files to hold configuration:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;appsettings.json&lt;/code&gt; holds .NET Core logging levels:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;Logging&amp;quot;: {
        &amp;quot;IncludeScopes&amp;quot;: false,
        &amp;quot;LogLevel&amp;quot;: {
            &amp;quot;Default&amp;quot;: &amp;quot;Error&amp;quot;,
            &amp;quot;System&amp;quot;: &amp;quot;Error&amp;quot;,
            &amp;quot;Microsoft&amp;quot;: &amp;quot;Error&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config.json&lt;/code&gt; holds the ADO.NET Connection String:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;Data&amp;quot;: {
        &amp;quot;ConnectionString&amp;quot;: &amp;quot;server=127.0.0.1;user id=mysqltest;password=test;port=3306;database=blog;&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AppConfig.cs&lt;/code&gt; is a static class that builds a Configuration object from these files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.IO;
using Microsoft.Extensions.Configuration;

namespace MySqlConnector.Performance
{
    public static class AppConfig
    {
        public static IConfigurationRoot Config = new ConfigurationBuilder()
        .SetBasePath(Directory.GetCurrentDirectory())
        .AddJsonFile(&amp;quot;appsettings.json&amp;quot;)
        .AddJsonFile(&amp;quot;config.json&amp;quot;)
        .Build();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AppDb.cs&lt;/code&gt; is a disposable &lt;a href=&#34;overview/configuration/&#34;&gt;Application Database Object&lt;/a&gt;, adapted to read the ConnectionString
from the Configuration Object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using MySql.Data.MySqlClient;

namespace MySqlConnector.Performance
{
    public class AppDb : IDisposable
    {

        public MySqlConnection Connection;

        public AppDb()
        {
            Connection = new MySqlConnection(AppConfig.Config[&amp;quot;Data:ConnectionString&amp;quot;]);
        }

        public void Dispose()
        {
            Connection.Close();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;net-core-program-cs-and-startup-cs-files&#34;&gt;.NET Core Program.cs and Startup.cs Files&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Program.cs&lt;/code&gt; contains the application entry point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNetCore.Hosting;

namespace MySqlConnector.Performance
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var host = new WebHostBuilder()
                .UseKestrel()
                .UseStartup&amp;lt;Startup&amp;gt;()
                .Build();
            host.Run();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Startup.cs&lt;/code&gt; contains runtime configuration and framework services:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Buffers;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc.Formatters;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace MySqlConnector.Performance
{
    public class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            Configuration = AppConfig.Config;
        }

        public IConfigurationRoot Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            services.AddMvc(options =&amp;gt;
            {
                options.OutputFormatters.Clear();
                options.OutputFormatters.Add(new JsonOutputFormatter(new JsonSerializerSettings()
                {
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                }, ArrayPool&amp;lt;char&amp;gt;.Shared));
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole(Configuration.GetSection(&amp;quot;Logging&amp;quot;));
            loggerFactory.AddDebug();

            app.UseMvc();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our app is configured and we can focus on writing the core functionality!&lt;/p&gt;

&lt;h3 id=&#34;models&#34;&gt;Models&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;BlogPost.cs&lt;/code&gt; represents a single Blog Post, and contains Insert, Update, and Delete methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Data;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;
using Newtonsoft.Json;

namespace MySqlConnector.Performance.Models
{
    public class BlogPost
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Content { get; set; }

        [JsonIgnore]
        public AppDb Db { get; set; }

        public BlogPost(AppDb db=null)
        {
            Db = db;
        }

        public async Task InsertAsync()
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;INSERT INTO `BlogPost` (`Title`, `Content`) VALUES (@title, @content);&amp;quot;;
            BindParams(cmd);
            await cmd.ExecuteNonQueryAsync();
            Id = (int) cmd.LastInsertedId;
        }

        public async Task UpdateAsync()
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;UPDATE `BlogPost` SET `Title` = @title, `Content` = @content WHERE `Id` = @id;&amp;quot;;
            BindParams(cmd);
            BindId(cmd);
            await cmd.ExecuteNonQueryAsync();
        }

        public async Task DeleteAsync()
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;DELETE FROM `BlogPost` WHERE `Id` = @id;&amp;quot;;
            BindId(cmd);
            await cmd.ExecuteNonQueryAsync();
        }

        private void BindId(MySqlCommand cmd)
        {
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@id&amp;quot;,
                DbType = DbType.Int32,
                Value = Id,
            });
        }

        private void BindParams(MySqlCommand cmd)
        {
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@title&amp;quot;,
                DbType = DbType.String,
                Value = Title,
            });
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@content&amp;quot;,
                DbType = DbType.String,
                Value = Content,
            });
        }

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;BlogPostQuery.cs&lt;/code&gt; contains commands to query Blog Posts from the database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;

namespace MySqlConnector.Performance.Models
{
    public class BlogPostQuery
    {

        public readonly AppDb Db;
        public BlogPostQuery(AppDb db)
        {
            Db = db;
        }

        public async Task&amp;lt;BlogPost&amp;gt; FindOneAsync(int id)
        {
            var cmd = Db.Connection.CreateCommand() as MySqlCommand;
            cmd.CommandText = @&amp;quot;SELECT `Id`, `Title`, `Content` FROM `BlogPost` WHERE `Id` = @id&amp;quot;;
            cmd.Parameters.Add(new MySqlParameter
            {
                ParameterName = &amp;quot;@id&amp;quot;,
                DbType = DbType.Int32,
                Value = id,
            });
            var result = await ReadAllAsync(await cmd.ExecuteReaderAsync());
            return result.Count &amp;gt; 0 ? result[0] : null;
        }

        public async Task&amp;lt;List&amp;lt;BlogPost&amp;gt;&amp;gt; LatestPostsAsync()
        {
            var cmd = Db.Connection.CreateCommand();
            cmd.CommandText = @&amp;quot;SELECT `Id`, `Title`, `Content` FROM `BlogPost` ORDER BY `Id` DESC LIMIT 10;&amp;quot;;
            return await ReadAllAsync(await cmd.ExecuteReaderAsync());
        }

        public async Task DeleteAllAsync()
        {
            var txn = await Db.Connection.BeginTransactionAsync();
            try
            {
                var cmd = Db.Connection.CreateCommand();
                cmd.CommandText = @&amp;quot;DELETE FROM `BlogPost`&amp;quot;;
                await cmd.ExecuteNonQueryAsync();
                await txn.CommitAsync();
            }
            catch
            {
                await txn.RollbackAsync();
                throw;
            }
        }

        private async Task&amp;lt;List&amp;lt;BlogPost&amp;gt;&amp;gt; ReadAllAsync(DbDataReader reader)
        {
            var posts = new List&amp;lt;BlogPost&amp;gt;();
            using (reader)
            {
                while (await reader.ReadAsync())
                {
                    var post = new BlogPost(Db)
                    {
                        Id = await reader.GetFieldValueAsync&amp;lt;int&amp;gt;(0),
                        Title = await reader.GetFieldValueAsync&amp;lt;string&amp;gt;(1),
                        Content = await reader.GetFieldValueAsync&amp;lt;string&amp;gt;(2)
                    };
                    posts.Add(post);
                }
            }
            return posts;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;AsyncController.cs&lt;/code&gt; expose Async API Endpoints for CRUD operations on Blog Posts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using MySqlConnector.Performance.Models;

namespace MySqlConnector.Performance.Controllers
{
    [Route(&amp;quot;api/[controller]&amp;quot;)]
    public class AsyncController : Controller
    {
        // GET api/async
        [HttpGet]
        public async Task&amp;lt;IActionResult&amp;gt; GetLatest()
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.LatestPostsAsync();
                return new OkObjectResult(result);
            }
        }

        // GET api/async/5
        [HttpGet(&amp;quot;{id}&amp;quot;)]
        public async Task&amp;lt;IActionResult&amp;gt; GetOne(int id)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.FindOneAsync(id);
                if (result == null)
                return new NotFoundResult();
                return new OkObjectResult(result);
            }
        }

        // POST api/async
        [HttpPost]
        public async Task&amp;lt;IActionResult&amp;gt; Post([FromBody]BlogPost body)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                body.Db = db;
                await body.InsertAsync();
                return new OkObjectResult(body);
            }
        }

        // PUT api/async/5
        [HttpPut(&amp;quot;{id}&amp;quot;)]
        public async Task&amp;lt;IActionResult&amp;gt; PutOne(int id, [FromBody]BlogPost body)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.FindOneAsync(id);
                if (result == null)
                    return new NotFoundResult();
                result.Title = body.Title;
                result.Content = body.Content;
                await result.UpdateAsync();
                return new OkObjectResult(result);
            }
        }

        // DELETE api/async/5
        [HttpDelete(&amp;quot;{id}&amp;quot;)]
        public async Task&amp;lt;IActionResult&amp;gt; DeleteOne(int id)
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                var result = await query.FindOneAsync(id);
                if (result == null)
                    return new NotFoundResult();
                await result.DeleteAsync();
                return new OkResult();
            }
        }

        // DELETE api/async
        [HttpDelete]
        public async Task&amp;lt;IActionResult&amp;gt; DeleteAll()
        {
            using (var db = new AppDb())
            {
                await db.Connection.OpenAsync();
                var query = new BlogPostQuery(db);
                await query.DeleteAllAsync();
                return new OkResult();
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-the-app&#34;&gt;Run the App&lt;/h3&gt;

&lt;p&gt;Congratulations, you should have a fully functional app at this point!  You should be able to run &lt;code&gt;dotnet run&lt;/code&gt; to start your application.&lt;/p&gt;

&lt;p&gt;The following API Endpoints should work.  Note to set &lt;code&gt;Content-Type: application/json&lt;/code&gt; headers on &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;POST http://localhost:5000/api/async
{ &amp;quot;Title&amp;quot;: &amp;quot;One&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;First Blog Post!&amp;quot; }

POST http://localhost:5000/api/async
{ &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post!&amp;quot; }

POST http://localhost:5000/api/async
{ &amp;quot;Title&amp;quot;: &amp;quot;Three&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Third Blog Post!&amp;quot; }

GET http://localhost:5000/api/async
// Output:
[
    { &amp;quot;Id&amp;quot;: 3, &amp;quot;Title&amp;quot;: &amp;quot;Three&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Third Blog Post!&amp;quot; },
    { &amp;quot;Id&amp;quot;: 2, &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post!&amp;quot; },
    { &amp;quot;Id&amp;quot;: 1, &amp;quot;Title&amp;quot;: &amp;quot;One&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;First Blog Post!&amp;quot;}
]

DELETE http://localhost:5000/api/async/1
// blog post 1 is gone

PUT http://localhost:5000/api/async/2
{ &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post Revised&amp;quot; }

GET http://localhost:5000/api/async
// Output:
[
    { &amp;quot;Id&amp;quot;: 3, &amp;quot;Title&amp;quot;: &amp;quot;Three&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Third Blog Post!&amp;quot; },
    { &amp;quot;Id&amp;quot;: 2, &amp;quot;Title&amp;quot;: &amp;quot;Two&amp;quot;, &amp;quot;Content&amp;quot;: &amp;quot;Second Blog Post Revised&amp;quot; },
]

DELETE http://localhost:5000/api/async
// all blog posts are gone

GET http://localhost:5000/api/async
// Output:
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you would like to see all of this code and more on GitHub, check out &lt;a href=&#34;https://github.com/mysql-net/MySqlConnector/tree/master/tests/MySqlConnector.Performance&#34;&gt;MySqlConnector.Performance&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/configuration/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/configuration/</guid>
      <description>

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;MySqlConnector uses a connection string in order to connect to your database.&lt;/p&gt;

&lt;p&gt;To connect to a database on &lt;code&gt;localhost&lt;/code&gt; port &lt;code&gt;3306&lt;/code&gt; with a user &lt;code&gt;mysqltest&lt;/code&gt;, password &lt;code&gt;Password123&lt;/code&gt;, and default schema &lt;code&gt;mysqldb&lt;/code&gt;, the connection string would be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host=127.0.0.1;port=3306;user id=mysqltest;password=Password123;database=mysqldb;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For all connection string options, view the &lt;a href=&#34;connection-options/&#34;&gt;Connection Options Reference&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;application-database-object-example&#34;&gt;Application Database Object Example&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to use an IDisposable object that configures the connection string globally, and closes the connection automatically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class AppDb : IDisposable
{
    public readonly MySqlConnection Connection;

    public AppDb()
    {
        Connection = new MySqlConnection(&amp;quot;host=127.0.0.1;port=3306;user id=mysqltest;password=Password123;database=mysqldb;&amp;quot;);
    }

    public void Dispose()
    {
        Connection.Close();
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Callers can use the Application Database Object object like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public async Task AsyncMethod()
{
    using (var db = new AppDb())
    {
        await db.Connection.OpenAsync();
        // db.Connection is open and ready to use
    }
    // db.Connection was closed by AppDb.Dispose
}

public void SyncMethod()
{
    using (var db = new AppDb())
    {
        db.Connection.Open();
        // db.Connection is open and ready to use
    }
    // db.Connection was closed by AppDb.Dispose
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MySqlTransaction</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-transaction/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-transaction/</guid>
      <description>

&lt;h1 id=&#34;mysqltransaction&#34;&gt;MySqlTransaction&lt;/h1&gt;

&lt;p&gt;MySqlTransaction implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/api/system.data.common.dbtransaction&#34;&gt;ADO.NET DbTransaction class&lt;/a&gt;,
please refer to its documentation.&lt;/p&gt;

&lt;p&gt;Additionally, MySqlTransaction provides the following public properties and methods that may be used:&lt;/p&gt;

&lt;h3 id=&#34;additional-instance-methods&#34;&gt;Additional Instance Methods&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public Task CommitAsync(CancellationToken cancellationToken = default(CancellationToken))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of Commit&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;public Task RollbackAsync(CancellationToken cancellationToken = default(CancellationToken))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Async version of Rollback&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Use with ORMs</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/use-with-orms/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/use-with-orms/</guid>
      <description>

&lt;h1 id=&#34;use-with-orms&#34;&gt;Use with ORMs&lt;/h1&gt;

&lt;p&gt;This library is compatible with popular .NET ORMs including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/StackExchange/dapper-dot-net&#34;&gt;Dapper&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/Dapper&#34;&gt;NuGet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nreco/data&#34;&gt;NReco.Data&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/NReco.Data&#34;&gt;NuGet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SimpleStack/simplestack.orm&#34;&gt;SimpleStack.Orm&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/SimpleStack.Orm.MySQLConnector&#34;&gt;NuGet&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Entity Framework support, use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql&#34;&gt;Pomelo.EntityFrameworkCore.MySql&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/Pomelo.EntityFrameworkCore.MySql&#34;&gt;NuGet&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>