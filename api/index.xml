<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on MySqlConnector: Async MySQL Driver for .NET and .NET Core</title>
    <link>https://mysql-net.github.io/MySqlConnector/api/</link>
    <description>Recent content in Api on MySqlConnector: Async MySQL Driver for .NET and .NET Core</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 16 Oct 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mysql-net.github.io/MySqlConnector/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySqlConnection</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-connection/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-connection/</guid>
      <description>MySqlConnection MySqlConnection implements the ADO.NET DbConnection class; please refer to its documentation.
Additionally, MySqlConnection provides the following public properties and methods that may be used:
Constructors public MySqlConnection()
Parameterless constructor
public MySqlConnection(string connectionString)
Constructor that set the connection string
Additional Properties public int ServerThread
Connection ID from MySQL Server
Additional Instance Methods public Task&amp;lt;MySqlTransaction&amp;gt; BeginTransactionAsync(CancellationToken cancellationToken = default(CancellationToken))
Async version of BeginTransaction
public Task&amp;lt;MySqlTransaction&amp;gt; BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken = default(CancellationToken))</description>
    </item>
    
    <item>
      <title>MySqlCommand</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-command/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-command/</guid>
      <description>MySqlCommand MySqlCommand implements the ADO.NET DbCommand class; please refer to its documentation.
Additionally, MySqlCommand provides the following public properties and methods that may be used:
Constructors public MySqlCommand()
Parameterless constructor
public MySqlCommand(string commandText)
constructor accepting command SQL
public MySqlCommand(MySqlConnection connection, MySqlTransaction transaction)
constructor accepting connection object and transaction object
public MySqlCommand(string commandText, MySqlConnection connection)
constructor accepting command SQL and connection object
public MySqlCommand(string commandText, MySqlConnection connection, MySqlTransaction transaction)
constructor accepting command SQL, connection object, and transaction object</description>
    </item>
    
    <item>
      <title>MySqlDataReader</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-data-reader/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-data-reader/</guid>
      <description>MySqlDataReader MySqlDataReader implements the ADO.NET DbDataReader class; please refer to its documentation.
Additionally, MySqlDataReader provides the following public properties and methods that may be used:
Additional Instance Methods public sbyte GetSByte(int ordinal)
Gets the value of the specified column as an sbyte
public DateTimeOffset GetDateTimeOffset(int ordinal)
Gets the value of the specified column as a DateTimeOffset with an offset of 0
public ReadOnlyCollection&amp;lt;DbColumn&amp;gt; GetColumnSchema()
Implements the new IDbColumnSchemaGenerator.GetColumnSchema interface that returns metadata about the columns in the result set.</description>
    </item>
    
    <item>
      <title>MySqlTransaction</title>
      <link>https://mysql-net.github.io/MySqlConnector/api/mysql-transaction/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/api/mysql-transaction/</guid>
      <description>MySqlTransaction MySqlTransaction implements the ADO.NET DbTransaction class, please refer to its documentation.
Additionally, MySqlTransaction provides the following public properties and methods that may be used:
Additional Instance Methods public Task CommitAsync(CancellationToken cancellationToken = default(CancellationToken))
Async version of Commit
public Task RollbackAsync(CancellationToken cancellationToken = default(CancellationToken))
Async version of Rollback</description>
    </item>
    
  </channel>
</rss>